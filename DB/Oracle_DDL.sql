Alter Session set "_ORACLE_SCRIPT"=TRUE;
CREATE user ORA_MIGRA 
IDENTIFIED BY wordpass account unlock;

GRANT create session TO ORA_MIGRA;
grant create type to ORA_MIGRA;
grant create sequence to ORA_MIGRA;
grant create table to ORA_MIGRA;
grant create view to ORA_MIGRA;
grant create materialized view to ORA_MIGRA;
GRANT CREATE PROCEDURE to ORA_MIGRA;
GRANT unlimited tablespace to ORA_MIGRA;
grant dba to ORA_MIGRA;


  CREATE OR REPLACE NONEDITIONABLE TYPE ORA_MIGRA.SOLID_TYP AS OBJECT (
  len    INTEGER,
  wth    INTEGER,
  hgt    INTEGER,
  MEMBER FUNCTION volume RETURN INTEGER );
/

CREATE OR REPLACE NONEDITIONABLE TYPE BODY ORA_MIGRA.SOLID_TYP AS
  MEMBER FUNCTION volume RETURN INTEGER IS
  BEGIN
    RETURN len * wth * hgt;
  END;
END;
/

  CREATE OR REPLACE NONEDITIONABLE TYPE ORA_MIGRA.FULL_MAILING_ADDRESS_TYPE AS OBJECT
( Street       VARCHAR2(80),
  City         VARCHAR2(80),
  State        CHAR(2),
  Zip          VARCHAR2(10) );
/

  CREATE OR REPLACE NONEDITIONABLE TYPE ORA_MIGRA.STACK AS OBJECT ( 
   max_size INTEGER, 
   top      INTEGER,   
   MEMBER PROCEDURE initialize,
   MEMBER FUNCTION full RETURN BOOLEAN,
   MEMBER FUNCTION empty RETURN BOOLEAN,
   MEMBER PROCEDURE push (n IN INTEGER),
   MEMBER PROCEDURE pop (n OUT INTEGER)
);
/

  CREATE TABLE ORA_MIGRA.REGIONS 
   (	REGION_ID NUMBER NOT NULL ENABLE, 
	REGION_NAME VARCHAR2(25), 
	 CONSTRAINT REG_ID_PK PRIMARY KEY (REGION_ID)
  USING INDEX (CREATE UNIQUE INDEX ORA_MIGRA.REG_ID_PKX ON ORA_MIGRA.REGIONS (REGION_ID) 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE USERS )  ENABLE
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE USERS ;

  CREATE TABLE ORA_MIGRA.COUNTRIES 
   (	COUNTRY_ID CHAR(2) NOT NULL ENABLE, 
	COUNTRY_NAME VARCHAR2(40), 
	REGION_ID NUMBER, 
	 CONSTRAINT COUNTRY_C_ID_PK PRIMARY KEY (COUNTRY_ID)
  USING INDEX (CREATE UNIQUE INDEX ORA_MIGRA.COUNTRY_C_ID_PKX ON ORA_MIGRA.COUNTRIES (COUNTRY_ID) 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE USERS )  ENABLE, 
	 CONSTRAINT COUNTR_REG_FK FOREIGN KEY (REGION_ID)
	  REFERENCES ORA_MIGRA.REGIONS (REGION_ID) DISABLE
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE USERS ;

  CREATE TABLE ORA_MIGRA.BESTELLUNG_CHANGED_MAIL_AN_AN 
   (	BESTELLUNG_ID NUMBER(28,0) NOT NULL ENABLE, 
	MAIL_SEND_DATE DATE, 
	BESTELLUNG_CHANGED_ID NUMBER(28,0) NOT NULL ENABLE, 
	AENDER_ART VARCHAR2(1) NOT NULL ENABLE, 
	DC DATE, 
	UC VARCHAR2(30), 
	DM DATE, 
	UM VARCHAR2(30)
   ) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  TABLESPACE USERS ;

  CREATE TABLE ORA_MIGRA.LEISTUNG 
   (	LEIST_MUSS_GEBUCHT_WERDEN_JN CHAR(1), 
	RESSOURCE_ID FLOAT(126), 
	ID FLOAT(126), 
	LEISTUNGS_NR NUMBER(*,0), 
	BEZEICHNUNG1 CHAR(1), 
	BEZEICHNUNG2 CHAR(1), 
	PREIS_AKTUELL NUMBER(*,0), 
	PREIS_NEU NUMBER(*,0), 
	EINHEIT CHAR(1), 
	GUELTIG_AB_DATUM DATE, 
	BEGINN_STORNOZEIT NUMBER(*,0), 
	STORNOGEBUEHR NUMBER(*,0), 
	KST_KOSTENSTELLE CHAR(1), 
	DIENSTLEISTER_ID NUMBER(*,0), 
	SAP_LEISTUNGSART_ID FLOAT(126), 
	DC DATE, 
	UC CHAR(1), 
	DM DATE, 
	UM CHAR(1), 
	STORNOGEBUEHR_IN_PROZENT CHAR(1), 
	FESTPREIS CHAR(1), 
	INAKTIV CHAR(1), 
	PREIS_NACH_SAP_UEBERTR CHAR(1), 
	TAG FLOAT(126), 
	MINDEST_BESTELLMENGE FLOAT(126), 
	MAXIMALE_ANZAHL_TAG FLOAT(126), 
	BILD_NAME CHAR(1)
   ) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  TABLESPACE USERS ;

  CREATE TABLE ORA_MIGRA.BPELEMPLOYEES 
   (	EMPLOYEE_ID FLOAT(126) NOT NULL ENABLE, 
	FIRST_NAME VARCHAR2(20), 
	LAST_NAME VARCHAR2(25), 
	EMAIL VARCHAR2(25), 
	PHONE_FLOAT VARCHAR2(20), 
	HIRE_DATE DATE, 
	JOB_ID VARCHAR2(10), 
	SALARY NUMBER(8,2)
   ) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  TABLESPACE USERS ;

  CREATE TABLE ORA_MIGRA.VERANST_RAUM 
   (	ID FLOAT(126), 
	FON CHAR(1), 
	SERIENBUCHUNG CHAR(1), 
	SCHLUESSEL_NR CHAR(1), 
	ANZEIGE_KENNZEICHEN CHAR(1), 
	BEMERKUNG CHAR(1), 
	KST_KOSTENSTELLE CHAR(1), 
	RAUM_TYP_ID NUMBER(*,0), 
	SPERR_TYP_ID NUMBER(*,0), 
	STUHL_TYP_ID NUMBER(*,0), 
	DC DATE, 
	UC CHAR(1), 
	DM DATE, 
	UM CHAR(1), 
	GRUPPE_ID NUMBER, 
	ANZAHL_RAEUME NUMBER(*,0), 
	ETAGE_ID NUMBER, 
	BEZEICHNUNG1 CHAR(1), 
	TEILBAR CHAR(1), 
	AKTIV CHAR(1), 
	NUTZUNGSPAUSCHALE FLOAT(126), 
	STORNOZEITRAUM NUMBER(*,0), 
	STORNOGEBUEHR NUMBER(*,0), 
	PREIS_NACH_SAP_UEBERTR CHAR(1), 
	DELDAT DATE, 
	KOSTENBELASTUNG_VON FLOAT(126), 
	KOSTENBELASTUNG_BIS FLOAT(126), 
	ZUSAETZLICHE_BUCHUNGSINFO CHAR(1), 
	ANZAHL_SITZPLAETZE NUMBER(*,0), 
	SAP_ABRECHNUNG_JN CHAR(1), 
	BESTUHLUNGSAEND_DL_ID FLOAT(126), 
	STORNOBEDINGUNGEN CHAR(1)
   ) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  TABLESPACE USERS ;

  CREATE TABLE ORA_MIGRA.BESTELLUNG_CHANGED_MAIL_AN_DL 
   (	BESTELLUNG_ID NUMBER(28,0) NOT NULL ENABLE, 
	MAIL_SEND_DATE DATE, 
	BESTELLUNG_CHANGED_ID NUMBER(28,0) NOT NULL ENABLE, 
	AENDER_ART VARCHAR2(1) NOT NULL ENABLE, 
	DC DATE, 
	UC VARCHAR2(30), 
	DM DATE, 
	UM VARCHAR2(30)
   ) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  TABLESPACE USERS ;

  CREATE TABLE ORA_MIGRA.SAP_ABRECHNUNGS_TERMINE 
   (	ID NUMBER NOT NULL ENABLE, 
	TERMIN DATE NOT NULL ENABLE, 
	ABRECHNUNG_ERFOLGT_AM DATE, 
	SAP_WELT_ID NUMBER(7,0) NOT NULL ENABLE
   ) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  TABLESPACE USERS ;

  CREATE TABLE ORA_MIGRA.MITARBEITER_BI_ALLE 
   (	ID NUMBER(7,0), 
	THOMAEMA VARCHAR2(1), 
	INAKTIV VARCHAR2(1), 
	ANREDE VARCHAR2(10), 
	TITEL VARCHAR2(15), 
	VORNAME VARCHAR2(30), 
	VORSATZWORT VARCHAR2(15), 
	NACHNAME VARCHAR2(30), 
	KUERZEL VARCHAR2(10), 
	USERNAME VARCHAR2(8), 
	ORGEINHEITID NUMBER(7,0), 
	ERSTTELEFON VARCHAR2(6), 
	KOSTENSTELLE NUMBER(9,0), 
	ETAGE VARCHAR2(2), 
	GEBAEUDE VARCHAR2(6), 
	EXT_TELEFON VARCHAR2(20), 
	MAIL_ADRESSE VARCHAR2(256), 
	USI_KUERZEL VARCHAR2(6), 
	USERNAME_ALT VARCHAR2(8), 
	HAUSPOSTZAHL VARCHAR2(30), 
	RAUMID NUMBER(28,0), 
	SEKTOR VARCHAR2(1), 
	RAUM_HAUPT_NR VARCHAR2(10), 
	RAUM_UNTER_NR VARCHAR2(2), 
	FAX VARCHAR2(8), 
	TECHNISCHER_USER VARCHAR2(1) DEFAULT 'N', 
	BETR_MITARBEITER_ID NUMBER(7,0), 
	SMTP_ADRESSE VARCHAR2(128), 
	DC DATE DEFAULT sysdate, 
	STANDORTID NUMBER(28,0), 
	IMPORT_JN VARCHAR2(1) DEFAULT 'J', 
	MITARBEITER_BI_ID VARCHAR2(15), 
	USERNAME_IMPORT VARCHAR2(30), 
	DELDAT DATE, 
	SLAVE_ACCOUNT VARCHAR2(1) DEFAULT 'N', 
	MENSCH_JN VARCHAR2(1) DEFAULT 'J', 
	AUSWEISNUMMER VARCHAR2(10), 
	MITARB_BI_ID_POT_TEMP VARCHAR2(10), 
	KEIN_ARBEITSPLATZ_PAMI VARCHAR2(1), 
	KEIN_ARBEITSPLATZ_SAP VARCHAR2(1), 
	KEIN_ARBEITSPLATZ VARCHAR2(1), 
	EXTERNE_FIRMA VARCHAR2(65), 
	MOBILTELEFON VARCHAR2(25), 
	AD_ACCOUNT_AKTIV VARCHAR2(1), 
	DEFAULT_MAILADRESSE VARCHAR2(256), 
	ISMANAGER_JN VARCHAR2(1), 
	MITARBEITER_BI_ID_SAVE VARCHAR2(10), 
	AKTIV_JN_BI VARCHAR2(1), 
	AUSWEIS_ABLAUFDATUM DATE, 
	AUSTRITTSDATUM_SOLL DATE, 
	IMMER_IN_MARB_VIEW_JN VARCHAR2(1) DEFAULT 'N', 
	USERNAME_30 VARCHAR2(30), 
	USERNAME_30_ALT VARCHAR2(30), 
	PERSONALNUMMER VARCHAR2(30), 
	VERTRAUENS_ARB_ZEIT_JN VARCHAR2(1), 
	ORG_EINHEIT_AUS_MAIL VARCHAR2(20)
   ) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  TABLESPACE USERS ;

  CREATE TABLE ORA_MIGRA.DATE_TABLE 
   (	COLUMN1 DATE, 
	COLUMN2 VARCHAR2(10)
   ) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  TABLESPACE USERS ;

  CREATE TABLE ORA_MIGRA.RAUM 
   (	ID NUMBER(28,0) NOT NULL ENABLE, 
	ETAGEID NUMBER(28,0) NOT NULL ENABLE, 
	DC DATE DEFAULT sysdate NOT NULL ENABLE, 
	UC VARCHAR2(30) DEFAULT user NOT NULL ENABLE, 
	RAUM VARCHAR2(10) NOT NULL ENABLE, 
	UNTER VARCHAR2(2) DEFAULT '00' NOT NULL ENABLE, 
	BEZEICHNUNG VARCHAR2(50), 
	FLAECHE NUMBER NOT NULL ENABLE, 
	LOCKED VARCHAR2(1) DEFAULT 'N' NOT NULL ENABLE, 
	DM DATE, 
	UM VARCHAR2(30), 
	BETRVON DATE, 
	BETRBIS DATE, 
	HOEHE NUMBER(6,2), 
	HOEHELICHT NUMBER(6,2), 
	VOLUMEN NUMBER(9,2), 
	UMFANG NUMBER(6,2), 
	DELDAT DATE, 
	TUER_TEXT VARCHAR2(400), 
	ALTE_RAUM_NR VARCHAR2(20), 
	SEKTOR VARCHAR2(1), 
	HOEHE_LRF NUMBER(6,2), 
	HOEHE_LRR NUMBER(6,2), 
	HOEHE_RG NUMBER(6,2), 
	BEREICH VARCHAR2(1) DEFAULT 'a' NOT NULL ENABLE, 
	CAD_DM DATE DEFAULT sysdate, 
	CAD_UM VARCHAR2(30) DEFAULT user, 
	AP_PRAKTISCH NUMBER(3,0), 
	AP_IST NUMBER(3,0), 
	RAUMLAGE_ID NUMBER(28,0), 
	BEZEICHNUNG_ENGLISCH VARCHAR2(50), 
	STANDO_ID NUMBER(28,0), 
	ZK_ZUTRITTSSICHERUNGS_ART_ID NUMBER(7,0), 
	ZK_SCHUTZSTUFE_ID NUMBER(7,0), 
	ZK_STATUS_ID NUMBER(7,0), 
	AP_THEORETISCH NUMBER(8,1) GENERATED ALWAYS AS (CASE  WHEN (FLAECHE-8)/8+1<0 THEN 0 WHEN (FLAECHE-8)/8+1>=0 THEN ROUND((FLAECHE-8)/8+1,1) ELSE NULL END) VIRTUAL , 
	RAUM_ANF_GXP VARCHAR2(1) DEFAULT 'N' NOT NULL ENABLE, 
	AP_PRAKTISCH_DM DATE, 
	AP_PRAKTISCH_UM VARCHAR2(30), 
	AP_IST_DM DATE, 
	AP_IST_UM VARCHAR2(30), 
	RAUMKATEGORIE_ID NUMBER, 
	AUDIT_ID NUMBER(28,0), 
	AP_BEMERKUNG VARCHAR2(100), 
	AP_OPTIMIERBAR_JN VARCHAR2(1), 
	RAUM_BEZ_NR_CHANGE_DAT DATE, 
	AP_THEORETISCH_6 NUMBER GENERATED ALWAYS AS (CASE  WHEN FLAECHE<=8 THEN ROUND(FLAECHE/8,1) ELSE ROUND((FLAECHE-8)/6+1,1) END) VIRTUAL 
   ) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  TABLESPACE USERS ;

  CREATE TABLE ORA_MIGRA.ETAGENNUMMERN 
   (	ETAGENNUMMER VARCHAR2(2) NOT NULL ENABLE, 
	SORTIERFOLGE NUMBER(3,0), 
	BEZEICHNUNG VARCHAR2(30), 
	HOEHENKUERZEL VARCHAR2(1), 
	DC DATE DEFAULT sysdate, 
	STEHT_IM_RAUMBUCH_ZUR_VERF_JN VARCHAR2(1) DEFAULT 'N'
   ) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  TABLESPACE USERS ;

  CREATE TABLE ORA_MIGRA.CHAR_TABLE 
   (	COLUMN1 CHAR(1), 
	COLUMN2 VARCHAR2(10)
   ) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  TABLESPACE USERS ;

  CREATE TABLE ORA_MIGRA.STUNDEN 
   (	BEGINN DATE, 
	ENDE DATE
   ) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  TABLESPACE USERS ;

  CREATE TABLE ORA_MIGRA.JOBS 
   (	JOB_ID VARCHAR2(10) NOT NULL ENABLE, 
	JOB_TITLE VARCHAR2(35) NOT NULL ENABLE, 
	MIN_SALARY NUMBER(6,0), 
	MAX_SALARY NUMBER(6,0), 
	 CONSTRAINT JOB_ID_PK PRIMARY KEY (JOB_ID)
  USING INDEX (CREATE UNIQUE INDEX ORA_MIGRA.JOB_ID_PKX ON ORA_MIGRA.JOBS (JOB_ID) 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE USERS )  ENABLE
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE USERS ;

  CREATE TABLE ORA_MIGRA.GEBAEUDE_BEZEICHNUNG 
   (	ID NUMBER NOT NULL ENABLE, 
	GEBAEUDE_ID NUMBER NOT NULL ENABLE, 
	BEZEICHNUNG_ALTERNATIV VARCHAR2(50) NOT NULL ENABLE
   ) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  TABLESPACE USERS ;

  CREATE TABLE ORA_MIGRA.MY_TABLE 
   (	CURRENT_DATE VARCHAR2(10)
   ) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  TABLESPACE USERS ;

  CREATE TABLE ORA_MIGRA.UNIQUE_COL_TABLE 
   (	UNIQ_TAB_COL1 FLOAT(126) NOT NULL ENABLE, 
	UNIQ_TAB_COL2 VARCHAR2(10), 
	UNIQ_TAB_COL3 VARCHAR2(10), 
	UNIQ_TAB_COL4 CHAR(1)
   ) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  TABLESPACE USERS ;

  CREATE TABLE ORA_MIGRA.MITARBEITER_STANDORT_HIST 
   (	MITARBEITER_ID NUMBER(7,0) NOT NULL ENABLE, 
	STANDORT_ID_OLD NUMBER(28,0), 
	DC DATE DEFAULT sysdate NOT NULL ENABLE
   ) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  TABLESPACE USERS ;

  CREATE TABLE ORA_MIGRA.RAUM_IN_VERANST_RAUM 
   (	VERANST_RAUM_ID NUMBER NOT NULL ENABLE, 
	RAUM_ID NUMBER(28,0) NOT NULL ENABLE, 
	ETAGE_ID NUMBER(28,0) NOT NULL ENABLE, 
	UMZUG_ETAGE_MARK VARCHAR2(1), 
	 CONSTRAINT RAUM_IN_VERANST_RAUM_PK PRIMARY KEY (VERANST_RAUM_ID, RAUM_ID)
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  TABLESPACE USERS  ENABLE
   ) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  TABLESPACE USERS ;

  CREATE TABLE ORA_MIGRA.VERANSTALTUNG 
   (	ID NUMBER(8,0) NOT NULL ENABLE, 
	BEGINN DATE, 
	ENDE DATE, 
	THEMA VARCHAR2(120), 
	ANZAHL_TEILNEHMER NUMBER(4,0), 
	KST_KOSTENSTELLE VARCHAR2(12), 
	MITARBEITER_ID NUMBER(7,0) NOT NULL ENABLE, 
	PROJEKT_ID VARCHAR2(28), 
	AUFTRAG_ID VARCHAR2(12), 
	VERANST_TYP_ID NUMBER NOT NULL ENABLE, 
	DC DATE NOT NULL ENABLE, 
	UC VARCHAR2(30) NOT NULL ENABLE, 
	DM DATE, 
	UM VARCHAR2(30), 
	STATUS CHAR(1) NOT NULL ENABLE, 
	SERIEN_NR NUMBER, 
	BETREUER VARCHAR2(50), 
	STATUS_DATUM DATE, 
	AUFTRAG_ID_TEMP NUMBER, 
	SAP_DATUM DATE, 
	KST_KOSTENSTELLE_2 VARCHAR2(12), 
	KOSTENSTELLE_AUSLAND VARCHAR2(12), 
	STANDORT_ID NUMBER NOT NULL ENABLE, 
	MARB_ID_UC NUMBER(7,0) NOT NULL ENABLE
   ) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  TABLESPACE USERS ;

  CREATE TABLE ORA_MIGRA.TEST_TABLE 
   (	ID NUMBER, 
	VALUE VARCHAR2(20)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE USERS ;

  CREATE TABLE ORA_MIGRA.BESTELL_POSITION 
   (	ID FLOAT(126), 
	BESTELLUNG_ID FLOAT(126), 
	LEISTUNG_ID FLOAT(126), 
	ANZAHL FLOAT(126), 
	DC DATE, 
	UC CHAR(1), 
	DM DATE, 
	UM CHAR(1), 
	PREIS NUMBER(*,0), 
	SAP_ABRECHNUNGS_DATUM DATE, 
	VIDEO_GEGENSTELLE_ID FLOAT(126), 
	STATUS CHAR(1), 
	ANZAHL_STORNO FLOAT(126), 
	VERANSTALTUNG_ID NUMBER(*,0), 
	DIENST_TYP CHAR(1), 
	ANZAHL_MANUELL FLOAT(126), 
	ANSPRECHPARTNER_GEGENSTELLE CHAR(1)
   ) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  TABLESPACE USERS ;

  CREATE TABLE ORA_MIGRA.RAUM_TYP 
   (	ID NUMBER NOT NULL ENABLE, 
	BEZEICHNUNG VARCHAR2(30) NOT NULL ENABLE, 
	ANZAHL_PLAETZE VARCHAR2(30) NOT NULL ENABLE, 
	BEZEICHNUNG2 VARCHAR2(60), 
	NUTZUNGSPAUSCHALE NUMBER, 
	VERANSTALT_PUFFER NUMBER(4,0) NOT NULL ENABLE, 
	STORNOZEITRAUM NUMBER(4,0), 
	STORNOGEBUEHR NUMBER(4,0), 
	DC DATE NOT NULL ENABLE, 
	UC VARCHAR2(30) NOT NULL ENABLE, 
	DM DATE, 
	UM VARCHAR2(30), 
	TEMP_AZ_PLAETZE NUMBER(4,0), 
	PREIS_NACH_SAP_UEBERTR CHAR(1) NOT NULL ENABLE, 
	INAKTIV CHAR(1) NOT NULL ENABLE
   ) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  TABLESPACE USERS ;

  CREATE TABLE ORA_MIGRA.STUNDEN_META 
   (	BEGINN_CHR CHAR(1), 
	ENDE_CHR CHAR(1)
   ) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  TABLESPACE USERS ;

  CREATE TABLE ORA_MIGRA.ETAGE 
   (	ID NUMBER(28,0) NOT NULL ENABLE, 
	GEBAEUDEID NUMBER(28,0) NOT NULL ENABLE, 
	DC DATE DEFAULT sysdate NOT NULL ENABLE, 
	UC VARCHAR2(30) DEFAULT user NOT NULL ENABLE, 
	ETAGE VARCHAR2(2) NOT NULL ENABLE, 
	LOCKED VARCHAR2(1) DEFAULT 'N' NOT NULL ENABLE, 
	DM DATE, 
	UM VARCHAR2(30), 
	TRAG NUMBER(6,2), 
	VERKEHR NUMBER(6,2), 
	SCHALL NUMBER(2,0), 
	DELDAT DATE, 
	PROJEKTID NUMBER(28,0), 
	HOEHE_GR NUMBER(6,2), 
	BGF NUMBER(9,2), 
	BGF_B NUMBER(9,2), 
	BGF_C NUMBER(9,2), 
	STANDO_ID NUMBER(28,0)
   ) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  TABLESPACE USERS ;
 CREATE TABLE ORA_MIGRA.LOCATIONS 
   (	LOCATION_ID NUMBER(4,0) NOT NULL ENABLE, 
	STREET_ADDRESS VARCHAR2(40), 
	POSTAL_CODE VARCHAR2(12), 
	CITY VARCHAR2(30) NOT NULL ENABLE, 
	STATE_PROVINCE VARCHAR2(25), 
	COUNTRY_ID CHAR(2), 
	 CONSTRAINT LOC_ID_PK PRIMARY KEY (LOCATION_ID)
  USING INDEX (CREATE UNIQUE INDEX ORA_MIGRA.LOC_ID_PKX ON ORA_MIGRA.LOCATIONS (LOCATION_ID) 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE USERS )  ENABLE, 
	 CONSTRAINT LOC_C_ID_FK FOREIGN KEY (COUNTRY_ID)
	  REFERENCES ORA_MIGRA.COUNTRIES (COUNTRY_ID) ENABLE
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE USERS ;
  
  CREATE TABLE ORA_MIGRA.DEPARTMENTS 
   (	DEPARTMENT_ID NUMBER(4,0) NOT NULL ENABLE, 
	DEPARTMENT_NAME VARCHAR2(30) NOT NULL ENABLE, 
	MANAGER_ID NUMBER(6,0), 
	LOCATION_ID NUMBER(4,0), 
	 CONSTRAINT DEPT_ID_PK PRIMARY KEY (DEPARTMENT_ID)
  USING INDEX (CREATE UNIQUE INDEX ORA_MIGRA.DEPT_ID_PKX ON ORA_MIGRA.DEPARTMENTS (DEPARTMENT_ID) 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE USERS )  ENABLE, 
	 CONSTRAINT DEPT_LOC_FK FOREIGN KEY (LOCATION_ID)
	  REFERENCES ORA_MIGRA.LOCATIONS (LOCATION_ID) ENABLE
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE USERS ;
  
  CREATE TABLE ORA_MIGRA.EMPLOYEES 
   (	EMPLOYEE_ID NUMBER(6,0) NOT NULL ENABLE, 
	FIRST_NAME VARCHAR2(20), 
	LAST_NAME VARCHAR2(25) NOT NULL ENABLE, 
	EMAIL VARCHAR2(25) NOT NULL ENABLE, 
	PHONE_NUMBER VARCHAR2(20), 
	HIRE_DATE DATE NOT NULL ENABLE, 
	JOB_ID VARCHAR2(10) NOT NULL ENABLE, 
	SALARY NUMBER(8,2) NOT NULL ENABLE, 
	COMMISSION_PCT NUMBER(2,2), 
	MANAGER_ID NUMBER(6,0), 
	DEPARTMENT_ID NUMBER(4,0), 
	 CONSTRAINT EMP_EMAIL_UK UNIQUE (EMAIL)
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE USERS  ENABLE, 
	 CONSTRAINT EMP_EMP_ID_PK PRIMARY KEY (EMPLOYEE_ID)
  USING INDEX (CREATE UNIQUE INDEX ORA_MIGRA.EMP_EMP_ID_PKX ON ORA_MIGRA.EMPLOYEES (EMPLOYEE_ID) 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE USERS )  ENABLE, 
	 CONSTRAINT CONSTR_FIRST_NOT_NULL UNIQUE (PHONE_NUMBER)
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE USERS  ENABLE, 
	 CONSTRAINT EMP_SALARY_MIN CHECK ( salary > 0) ENABLE, 
	 CONSTRAINT EMP_JOB_FK FOREIGN KEY (JOB_ID)
	  REFERENCES ORA_MIGRA.JOBS (JOB_ID) ENABLE, 
	 CONSTRAINT EMP_DEPT_FK FOREIGN KEY (DEPARTMENT_ID)
	  REFERENCES ORA_MIGRA.DEPARTMENTS (DEPARTMENT_ID) ENABLE, 
	 CONSTRAINT EMP_MANAGER_FK FOREIGN KEY (MANAGER_ID)
	  REFERENCES ORA_MIGRA.EMPLOYEES (EMPLOYEE_ID) ENABLE
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE USERS ;


  CREATE TABLE ORA_MIGRA.DIENSTLEISTER 
   (	ID NUMBER NOT NULL ENABLE, 
	BEZEICHNUNG VARCHAR2(60) NOT NULL ENABLE, 
	DIENST_TYP CHAR(1) NOT NULL ENABLE, 
	NAME_1 VARCHAR2(30), 
	NAME_2 VARCHAR2(30), 
	STRASSE VARCHAR2(30) NOT NULL ENABLE, 
	PLZ NUMBER(5,0) NOT NULL ENABLE, 
	ORT VARCHAR2(40) NOT NULL ENABLE, 
	FON VARCHAR2(20) NOT NULL ENABLE, 
	FAX VARCHAR2(20) NOT NULL ENABLE, 
	EMAIL VARCHAR2(256) NOT NULL ENABLE, 
	STANDORT_ID NUMBER(28,0) NOT NULL ENABLE, 
	BESTELLUNG_PROG CHAR(1) NOT NULL ENABLE, 
	BESTELLUNG_FON CHAR(1) NOT NULL ENABLE, 
	BESTELLUNG_FAX CHAR(1) NOT NULL ENABLE, 
	BESTELLUNG_EMAIL CHAR(1) NOT NULL ENABLE, 
	BESTAETIGUNG_PROG CHAR(1) NOT NULL ENABLE, 
	BESTAETIGUNG_FON CHAR(1) NOT NULL ENABLE, 
	BESTAETIGUNG_FAX CHAR(1) NOT NULL ENABLE, 
	BESTAETIGUNG_EMAIL CHAR(1) NOT NULL ENABLE, 
	BESTELLZEIT_MINIMAL NUMBER, 
	GESCH_ZEIT_VON DATE, 
	GESCH_ZEIT_BIS DATE, 
	BEMERKUNGEN VARCHAR2(60), 
	ANLIEFERUNG_MOEGLICH CHAR(1), 
	ABTRANSPORT_MOEGLICH CHAR(1), 
	DC DATE NOT NULL ENABLE, 
	UC VARCHAR2(30) NOT NULL ENABLE, 
	DM DATE, 
	UM VARCHAR2(30), 
	BESTELLZEIT_MINUTEN NUMBER(3,0), 
	BESTELLZEIT_TAGE NUMBER(2,0), 
	BESTELLZEIT_VORTAG NUMBER, 
	BESTELLUNGEN_AUSSERHALB CHAR(1), 
	VERRECHNUNGSART VARCHAR2(6), 
	HINWEIS_DIENSTLEISTER VARCHAR2(60), 
	HINWEIS_BESTELLER VARCHAR2(60 CHAR), 
	INFO_PER VARCHAR2(5), 
	EINFUEGEN_POS CHAR(1) NOT NULL ENABLE, 
	STORNOZEIT_MINUTEN NUMBER(3,0), 
	STORNOZEIT_TAGE NUMBER(2,0), 
	STORNOZEIT_VORTAG NUMBER, 
	INFO_AN_BESTELLER VARCHAR2(100), 
	HINWEIS_BESTELLER_MBZ VARCHAR2(100), 
	BESTELLUNGEN_AUSSER_MBZ CHAR(1) NOT NULL ENABLE, 
	MELDUNG_AKTIV CHAR(1) NOT NULL ENABLE, 
	MELDUNGS_ZEITSPANNE NUMBER(4,0), 
	INAKTIV CHAR(1) NOT NULL ENABLE, 
	BESTELLZEIT_AKTUELLER_TAG NUMBER, 
	HTTP_LINK VARCHAR2(200), 
	HINWEISE_BESTELLER_MAX_ANZ_TAG VARCHAR2(100), 
	HINWEIS_BESTELLZEIT_AKT_TAG VARCHAR2(200), 
	RAUM_ERFORDERLICH CHAR(1) NOT NULL ENABLE, 
	LIEFERART_ERFORDERLICH CHAR(1) NOT NULL ENABLE, 
	ZEIT_ERFORDERLICH CHAR(1) NOT NULL ENABLE, 
	BEWIRTUNGSART_ERFORDERLICH CHAR(1) NOT NULL ENABLE, 
	TEILNEHMER_ERFORDERLICH CHAR(1) NOT NULL ENABLE, 
	SORTIERUNG_WEB NUMBER, 
	KONTAKT VARCHAR2(100), 
	GAESTEANMELDUNG_DL_JN CHAR(1) NOT NULL ENABLE, 
	MELDUNG_BEI_FEHLER_ANMELDUNG VARCHAR2(2000), 
	EMAIL_FEHLER_ANMELDUNG VARCHAR2(100), 
	RAUMBUCHUNGSDAUER_MINIMAL NUMBER(4,0), 
	RAUMBUCHUNGSDAUER_MIN_MELDUNG VARCHAR2(100), 
	EXTERNE_TEILN_ERF_JN CHAR(1), 
	EXTERNE_TEILN_ERF_JN_MLD VARCHAR2(100), 
	FREITEXT_BEI_VERANSTR_MOEGL_JN CHAR(1)
   ) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  TABLESPACE USERS ;

  CREATE TABLE ORA_MIGRA.STUHL_TYP 
   (	ID NUMBER NOT NULL ENABLE, 
	BEZEICHNUNG1 VARCHAR2(30) NOT NULL ENABLE, 
	BEZEICHNUNG2 VARCHAR2(60), 
	DC DATE NOT NULL ENABLE, 
	UC VARCHAR2(30) NOT NULL ENABLE, 
	DM DATE, 
	UM VARCHAR2(30)
   ) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  TABLESPACE USERS ;



  CREATE TABLE ORA_MIGRA.TBL_DBLNK 
   (	COL_INT FLOAT(126), 
	COL_NBR NUMBER(6,2), 
	COL_CHAR CHAR(4), 
	COL_VC2 VARCHAR2(50), 
	COL_DT DATE
   ) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  TABLESPACE USERS ;

  CREATE TABLE ORA_MIGRA.COMP_KEY_TABLE 
   (	PK1 FLOAT(126) NOT NULL ENABLE, 
	PK2 FLOAT(126) NOT NULL ENABLE, 
	COL1 FLOAT(126)
   ) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  TABLESPACE USERS ;

  CREATE TABLE ORA_MIGRA.BESTELLUNG 
   (	VERANST_RAUM_SAP_GEB_EURO FLOAT(126), 
	STORNO_DATUM DATE, 
	VERANST_RAUM_STORNO_GEB_EURO FLOAT(126), 
	SAP_POTENZIELL_ZU_VERR_JN CHAR(1), 
	THEMA CHAR(1), 
	ID FLOAT(126), 
	LFD_NR FLOAT(126), 
	VERANSTALTUNG_ID NUMBER(*,0), 
	DIENST_TYP CHAR(1), 
	DIENSTLEISTER_ID FLOAT(126), 
	BESTAET_FAX CHAR(1), 
	BESTAET_FON CHAR(1), 
	BESTAET_EMAIL CHAR(1), 
	BESTAET_STATUS CHAR(1), 
	BEMERKUNG1 CHAR(1), 
	BEMERKUNG2 CHAR(1), 
	BEGINN_TERMIN DATE, 
	ENDE_TERMIN DATE, 
	ANZAHL_GAESTE NUMBER(*,0), 
	ANZAHL_GASTGEBER NUMBER(*,0), 
	VERANST_RAUM_ID FLOAT(126), 
	BESTUHL_VARIANTE_ID FLOAT(126), 
	BEGINN_VERANTWORTLICH CHAR(1), 
	ENDE_VERANTWORTLICH CHAR(1), 
	BEGINN_ORT CHAR(1), 
	ENDE_ORT CHAR(1), 
	WIEDERVORLAGE_DATUM DATE, 
	ANLIEFERART CHAR(1), 
	ABHOLART CHAR(1), 
	BEWIRTUNGSART CHAR(1), 
	BEFOERDERUNGSART CHAR(1), 
	FAHRAUFTRAG_ID FLOAT(126), 
	DC DATE, 
	UC CHAR(1), 
	DM DATE, 
	UM CHAR(1), 
	WARTELISTE_DATUM DATE, 
	BEGINN_PUFFER DATE, 
	AUSGABE_MA_ID NUMBER(*,0), 
	RUECKGABE_MA_ID NUMBER(*,0), 
	AUSGABE_GAST_ID FLOAT(126), 
	RUECKGABE_GAST_ID FLOAT(126), 
	AUSGABE_TERMIN DATE, 
	RUECKGABE_TERMIN DATE, 
	VERBINDUNGSAUFBAU_DL CHAR(1), 
	SAP_ABRECHNUNGS_DATUM DATE, 
	ANZAHL_SITZPLAETZE NUMBER(*,0), 
	BESTELLUNG_ID FLOAT(126), 
	VIDEO_BESTELLUNG_ID FLOAT(126), 
	AUFTRAGSART_ID FLOAT(126), 
	DIENSTLEISTER_RAUM_ID FLOAT(126), 
	SAP_ABRECHNUNG_SPERREN CHAR(1), 
	BEMERKUNG_INTERN CHAR(1), 
	VIDEO_KONFERENZ_ID FLOAT(126), 
	OLD_ID FLOAT(126), 
	VIDEO_MASTER_ORDER CHAR(1), 
	BETREUER_MITARBEITER_ID FLOAT(126), 
	BETREUER_TELEFON_NR CHAR(1), 
	BETREUER_AUSWEISNUMMER CHAR(1), 
	ANGELEGT_DURCH_OUTLOOK CHAR(1), 
	OUTLOOK_TEILNEHMER CHAR(1)
   ) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  TABLESPACE USERS ;

  CREATE TABLE ORA_MIGRA.DATAMIGTESTING 
   (	ID NUMBER, 
	COLUMN1 VARCHAR2(20)
   ) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  TABLESPACE USERS ;

  CREATE TABLE ORA_MIGRA.STANDORT 
   (	ID NUMBER(28,0) NOT NULL ENABLE, 
	STANDORT VARCHAR2(100) NOT NULL ENABLE, 
	BEZEICHNUNG VARCHAR2(2000), 
	UC VARCHAR2(30) NOT NULL ENABLE, 
	DC DATE NOT NULL ENABLE, 
	UM VARCHAR2(30), 
	DM DATE, 
	DEFAULT_DATENSERVER VARCHAR2(80), 
	DEFAULT_DATENSERVER_HOST VARCHAR2(80), 
	KUERZEL VARCHAR2(3) NOT NULL ENABLE, 
	KUERZEL_BIDS VARCHAR2(10) NOT NULL ENABLE, 
	BER_ROLLE VARCHAR2(30), 
	SAP_WELT_ID NUMBER(7,0), 
	LAND_ID NUMBER(7,0) NOT NULL ENABLE, 
	ZEITZONE_ID NUMBER(7,0) NOT NULL ENABLE, 
	ZEITZONE_ORACLE_NAME_ID NUMBER(7,0) NOT NULL ENABLE, 
	CAD_WELT_ID NUMBER(7,0) DEFAULT 1 NOT NULL ENABLE, 
	DEFAULT_SPRACHE_ID NUMBER(7,0) NOT NULL ENABLE, 
	DIN_277_AUS_FLAE_BEZ_JN CHAR(1) DEFAULT 'N' NOT NULL ENABLE, 
	DELDAT DATE, 
	DEL_BEMERKUNG VARCHAR2(200), 
	DEFAULT_DOMAENE_ID NUMBER(7,0) NOT NULL ENABLE, 
	TYP_KURZ CHAR(1) DEFAULT 'B' NOT NULL ENABLE, 
	RAUMBUCH_GEPFLEGT_JN VARCHAR2(1) DEFAULT 'N', 
	FLAECHE_EINH_ID NUMBER, 
	WAEHRUNG_ID NUMBER, 
	BEMERKUNG VARCHAR2(400), 
	STANDORT_RAUM_NR_CHECK_ID NUMBER(7,0) DEFAULT 2 NOT NULL ENABLE, 
	LATITUDE NUMBER(9,6), 
	LONGITUDE NUMBER(9,6)
   ) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  TABLESPACE USERS ;

  CREATE TABLE ORA_MIGRA.CNV_DISC_SYSDAT 
   (	SECU_CUS_ID CHAR(9), 
	MSG_EXPT_DT DATE, 
	LOAD_DT DATE DEFAULT CURRENT_TIMESTAMP
   ) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  TABLESPACE USERS ;

  CREATE TABLE ORA_MIGRA.SOLIDS 
   (	LENGTH FLOAT(126), 
	WIDTH FLOAT(126), 
	HEIGHT FLOAT(126), 
	VOLUME FLOAT(126)
   ) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  TABLESPACE USERS ;

  CREATE TABLE ORA_MIGRA.WEB_STANDORT 
   (	ID NUMBER NOT NULL ENABLE, 
	STANDORT_ID NUMBER NOT NULL ENABLE, 
	SICHTBAR_IM_WEB CHAR(1) NOT NULL ENABLE, 
	BESCHREIBUNG VARCHAR2(100) NOT NULL ENABLE
   ) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  TABLESPACE USERS ;

  CREATE TABLE ORA_MIGRA.JOB_HISTORY 
   (	EMPLOYEE_ID FLOAT(126) NOT NULL ENABLE, 
	START_DATE DATE NOT NULL ENABLE, 
	END_DATE DATE NOT NULL ENABLE, 
	JOB_ID VARCHAR2(10) NOT NULL ENABLE, 
	DEPARTMENT_ID FLOAT(126)
   ) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  TABLESPACE USERS ;

  CREATE TABLE ORA_MIGRA.CLIENTS 
   (	CLIENT_ID FLOAT(126) NOT NULL ENABLE, 
	FIRST_NAME VARCHAR2(50) NOT NULL ENABLE, 
	LAST_NAME VARCHAR2(50) NOT NULL ENABLE, 
	COMPANY_NAME VARCHAR2(255) NOT NULL ENABLE, 
	EMAIL VARCHAR2(255) NOT NULL ENABLE, 
	PHONE VARCHAR2(25)
   ) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  TABLESPACE USERS ;

  CREATE TABLE ORA_MIGRA.GEBAEUDE 
   (	ID NUMBER(28,0) NOT NULL ENABLE, 
	KOSTENSTELLENID VARCHAR2(12), 
	DC DATE DEFAULT sysdate NOT NULL ENABLE, 
	UC VARCHAR2(30) DEFAULT user NOT NULL ENABLE, 
	GEBAEUDE VARCHAR2(5) NOT NULL ENABLE, 
	LOCKED VARCHAR2(1) DEFAULT 'N' NOT NULL ENABLE, 
	DM DATE, 
	UM VARCHAR2(30), 
	LAENGE NUMBER(6,2), 
	BREITE NUMBER(6,2), 
	HOEHE NUMBER(6,2), 
	RASTERX NUMBER(6,2), 
	RASTERY NUMBER(6,2), 
	HNG NUMBER(6,2), 
	BGF NUMBER(9,2), 
	NUTZARTID NUMBER(28,0), 
	GENEHMIGUNGID NUMBER(28,0), 
	BRILTG NUMBER(9,2), 
	BRI NUMBER(9,2), 
	NRI NUMBER(9,2), 
	BAUJAHR DATE, 
	NUTZBEGINN DATE, 
	WERT NUMBER(11,2), 
	HERSTELLUNGSKOST NUMBER(11,2), 
	MAFEM NUMBER(4,0), 
	MAMALE NUMBER(4,0), 
	DELDAT DATE, 
	BAUGRUND VARCHAR2(2000), 
	GRUNDWASSER NUMBER(6,1), 
	GRUENDUNGSARTID NUMBER(28,0), 
	TRAGKONST VARCHAR2(2000), 
	DACHKONST VARCHAR2(2000), 
	TEILKLIMA VARCHAR2(1), 
	VOLLKLIMA VARCHAR2(1), 
	FENSTERLUEFT VARCHAR2(1), 
	ZWANGSLUEFT VARCHAR2(1), 
	FASSADENART VARCHAR2(2000), 
	KWERT NUMBER(6,2), 
	FASSADENFL NUMBER(10,1), 
	FENSTERFL NUMBER(10,1), 
	BEZEICHNUNG VARCHAR2(60), 
	STANDORTID NUMBER(28,0) NOT NULL ENABLE, 
	SEKTOR VARCHAR2(1), 
	STATUS VARCHAR2(1) DEFAULT 'V' NOT NULL ENABLE, 
	EVA_ZAEHLER_FOLGE_NR NUMBER(5,0), 
	KLIMATISIERUNG CHAR(1), 
	BUCHUNGSKREIS NUMBER(4,0), 
	BGF_B NUMBER(9,2), 
	BGF_C NUMBER(9,2), 
	BRI_B NUMBER(9,2), 
	BRI_C NUMBER(9,2), 
	BETREUENDE_EINHEIT_ID NUMBER(28,0), 
	GEBAEUDETYP_ID NUMBER(28,0), 
	BAUFELD_ID NUMBER(28,0), 
	LETZTER_UMBAU DATE, 
	GRF NUMBER(9,2), 
	HAUPTGEBAEUDE_JN VARCHAR2(1) DEFAULT 'J' NOT NULL ENABLE, 
	KURZ_BEZEICHNUNG VARCHAR2(10), 
	MARA_GS_KLEINSTES_BUERO_QM NUMBER(5,2), 
	MARA_GS_KLEINSTER_ARBPLATZ_QM NUMBER(5,2), 
	MARA_GS_KOMMUNIKATIONS_ANT_QM NUMBER(5,2), 
	ZK_GEBAEUDEEINSTUFUNG_ID NUMBER(7,0), 
	ZK_ZUTRITTSSICHERUNGS_ART_ID NUMBER(7,0), 
	ZK_SCHUTZSTUFE_ID NUMBER(7,0), 
	ZK_STATUS_ID NUMBER(7,0), 
	OWNER_TYP_KURZ CHAR(1) DEFAULT 'O' NOT NULL ENABLE, 
	BEMERKUNG VARCHAR2(400), 
	IT_REF VARCHAR2(3), 
	REAL_ESTATE_SITE_ID NUMBER, 
	CORA_NR VARCHAR2(15), 
	FLAE_VERR_KST VARCHAR2(12), 
	LATITUDE NUMBER(9,6), 
	LONGITUDE NUMBER(9,6), 
	BILD BLOB DEFAULT NULL, 
	BILD_NAME VARCHAR2(50)
   ) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  TABLESPACE USERS 
 LOB (BILD) STORE AS SECUREFILE (
  TABLESPACE USERS ENABLE STORAGE IN ROW CHUNK 8192
  NOCACHE LOGGING  NOCOMPRESS  KEEP_DUPLICATES ) ;

  CREATE TABLE ORA_MIGRA.DATEI_AUSGABE 
   (	ID NUMBER NOT NULL ENABLE, 
	DATEI_NAME VARCHAR2(255) NOT NULL ENABLE, 
	DATEI_INHALT CLOB NOT NULL ENABLE, 
	DATEI_TYP VARCHAR2(10) NOT NULL ENABLE, 
	REFERENZ_ID NUMBER, 
	BEMERKUNG VARCHAR2(256), 
	TERMIN_FREIGABE DATE NOT NULL ENABLE, 
	TERMIN_GESCHRIEBEN DATE
   ) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  TABLESPACE USERS 
 LOB (DATEI_INHALT) STORE AS SECUREFILE (
  TABLESPACE USERS ENABLE STORAGE IN ROW CHUNK 8192
  NOCACHE LOGGING  NOCOMPRESS  KEEP_DUPLICATES ) ;


   CREATE SEQUENCE  ORA_MIGRA.EMPLOYEES_SEQ  
   MINVALUE 1 
   MAXVALUE 9999999999999999999999999999 
   INCREMENT BY 1 
   START WITH 1 
   NOCACHE  
   NOORDER  
   NOCYCLE  
   NOKEEP  
   NOSCALE  
   GLOBAL ;

   CREATE SEQUENCE  ORA_MIGRA.LOCATIONS_SEQ  
   MINVALUE 1 
   MAXVALUE 9900 
   INCREMENT BY 100 
   START WITH 1 
   NOCACHE  
   NOORDER  
   NOCYCLE  
   NOKEEP  
   NOSCALE  
   GLOBAL ;

   CREATE SEQUENCE  ORA_MIGRA.SAMPLE_SEQ  
   MINVALUE 1 
   MAXVALUE 9999999999999999999999999999 
   INCREMENT BY 1 
   START WITH 1 
   CACHE 20 
   NOORDER  
   NOCYCLE  
   NOKEEP  
   NOSCALE  
   GLOBAL ;

   CREATE SEQUENCE  ORA_MIGRA.DEPARTMENTS_SEQ  
   MINVALUE 1 
   MAXVALUE 9990 
   INCREMENT BY 10 
   START WITH 1 
   NOCACHE  
   NOORDER  
   NOCYCLE  
   NOKEEP  
   NOSCALE  
   GLOBAL ;

   CREATE SEQUENCE  ORA_MIGRA.SEQQ1  
   MINVALUE 1 
   MAXVALUE 9999999999999999999999999999 
   INCREMENT BY 1 
   START WITH 1 
   CACHE 20 
   NOORDER  
   NOCYCLE  
   NOKEEP  
   NOSCALE  
   GLOBAL ;


  CREATE OR REPLACE FORCE NONEDITIONABLE VIEW ORA_MIGRA.EMP_VIEW (EMPLOYEE_ID, FIRST_NAME, LAST_NAME, EMAIL, PHONE_NUMBER, HIRE_DATE, JOB_ID, SALARY, COMMISSION_PCT, MANAGER_ID, DEPARTMENT_ID) AS 
  select EMPLOYEE_ID,FIRST_NAME,LAST_NAME,EMAIL,PHONE_NUMBER,HIRE_DATE,JOB_ID,SALARY,COMMISSION_PCT,MANAGER_ID,DEPARTMENT_ID from ORA_MIGRA.EMPLOYEES
  ;

  CREATE OR REPLACE FORCE EDITIONABLE VIEW ORA_MIGRA.MITARBEITER (ID, THOMAEMA, INAKTIV, ANREDE, TITEL, VORNAME, VORSATZWORT, NACHNAME, KUERZEL, USERNAME, ORGEINHEITID, ERSTTELEFON, KOSTENSTELLE, ETAGE, GEBAEUDE, EXT_TELEFON, MAIL_ADRESSE, USI_KUERZEL, USERNAME_ALT, HAUSPOSTZAHL, RAUMID, SEKTOR, RAUM_HAUPT_NR, RAUM_UNTER_NR, FAX, TECHNISCHER_USER, BETR_MITARBEITER_ID, SMTP_ADRESSE, DC, STANDORTID, IMPORT_JN, MITARBEITER_BI_ID, USERNAME_IMPORT, DELDAT, SLAVE_ACCOUNT, MENSCH_JN, AUSWEISNUMMER, MITARB_BI_ID_POT_TEMP, KEIN_ARBEITSPLATZ_PAMI, KEIN_ARBEITSPLATZ_SAP, KEIN_ARBEITSPLATZ, EXTERNE_FIRMA, MOBILTELEFON, AD_ACCOUNT_AKTIV, DEFAULT_MAILADRESSE, ISMANAGER_JN, MITARBEITER_BI_ID_SAVE, AKTIV_JN_BI, AUSWEIS_ABLAUFDATUM, AUSTRITTSDATUM_SOLL, IMMER_IN_MARB_VIEW_JN, PERSONALNUMMER, VERTRAUENS_ARB_ZEIT_JN, ORG_EINHEIT_AUS_MAIL) AS 
  SELECT m.ID, m.THOMAEMA, m.INAKTIV, m.ANREDE, m.TITEL, m.VORNAME,
  m.VORSATZWORT, m.NACHNAME,
  m.KUERZEL, m.USERNAME, m.ORGEINHEITID,
  m.ERSTTELEFON, m.KOSTENSTELLE, m.ETAGE,
  m.GEBAEUDE, m.EXT_TELEFON,
  m.MAIL_ADRESSE, m.USI_KUERZEL, m.USERNAME_ALT, m.HAUSPOSTZAHL, m.RAUMID,
  m.SEKTOR, m.RAUM_HAUPT_NR, m.RAUM_UNTER_NR, m.FAX, m.TECHNISCHER_USER,
  m.BETR_MITARBEITER_ID, m.SMTP_ADRESSE, m.DC, m.STANDORTID, m.IMPORT_JN,
  m.MITARBEITER_BI_ID, m.USERNAME_IMPORT, m.DELDAT, m.SLAVE_ACCOUNT,
  m.MENSCH_JN, m.AUSWEISNUMMER, m.MITARB_BI_ID_POT_TEMP, m.KEIN_ARBEITSPLATZ_PAMI,
  m.KEIN_ARBEITSPLATZ_SAP, m.KEIN_ARBEITSPLATZ, m.EXTERNE_FIRMA, m.MOBILTELEFON,
  m.AD_ACCOUNT_AKTIV, m.DEFAULT_MAILADRESSE, m.ISMANAGER_JN, m.MITARBEITER_BI_ID_SAVE,
  m.AKTIV_JN_BI, m.AUSWEIS_ABLAUFDATUM, m.AUSTRITTSDATUM_SOLL, m.IMMER_IN_MARB_VIEW_JN,
  m.PERSONALNUMMER, m.Vertrauens_Arb_Zeit_JN,
  m.Org_Einheit_aus_Mail
    from ORA_MIGRA.MITARBEITER_bi_alle m where
          m.standortid in (1,2,23,44,63,107,780,292)
          or m.standortid is null
          or m.IMMER_IN_MARB_VIEW_JN = 'J'
          or exists (select mh2.mitarbeiter_id from ORA_MIGRA.Mitarbeiter_Standort_Hist mh2 where
                        mh2.mitarbeiter_id = m.id
                        and (mh2.STANDORT_ID_Old is null or mh2.STANDORT_ID_Old in (1,2,23,44,63,107))
                     )
;					 
	
  CREATE OR REPLACE FORCE EDITIONABLE VIEW ORA_MIGRA.ETAGE_V (ID, GEBAEUDEID, DC, UC, ETAGE, LOCKED, DM, UM, TRAG, VERKEHR, SCHALL, DELDAT, PROJEKTID, SORTIERFOLGE) AS 
  SELECT e.ID, e.GEBAEUDEID, e.DC, e.UC, e.ETAGE, e.LOCKED, e.DM, e.UM, e.TRAG, e.VERKEHR,
        e.SCHALL, e.DELDAT, e.PROJEKTID,ETAGENSORTIERFOLGE(e.ETAGE) as SORTIERFOLGE
FROM ORA_MIGRA.ETAGE e
;

  CREATE OR REPLACE FORCE EDITIONABLE VIEW ORA_MIGRA.ETAGE_GEB_STD_V (STANDORT_ID, STANDORT, GEBAEUDE_ID, GEBAEUDE, BEZEICHNUNG, ETAGE_ID, ETAGE, SEKTOR, SAP_WELT_ID, SORTIERFOLGE) AS 
  SELECT
  S.ID STANDORT_ID
  , S.STANDORT
  , G.ID GEBAEUDE_ID
  , G.GEBAEUDE || G.SEKTOR GEBAEUDE
  , G.BEZEICHNUNG
  , E.ID ETAGE_ID
  , E.ETAGE
  , G.SEKTOR
  , S.SAP_WELT_ID
  , E.SORTIERFOLGE
FROM ORA_MIGRA.ETAGE_V E,ORA_MIGRA.GEBAEUDE G, ORA_MIGRA.STANDORT S
WHERE E.GEBAEUDEID = G.ID
AND S.ID = G.STANDORTID
;

  CREATE OR REPLACE FORCE EDITIONABLE VIEW ORA_MIGRA.CRESTRON_FUSION_RAUM (STANDORT_ID, VR_RAUM_NAME, VR_AKTIV, RAUM_NR_GES_GEB, RAUM_NR_PUNKT, RAUM_VERRAUM_BEZ, RAUM_BEZ, VERANST_RAUM_ID, RAUM_ID) AS 
  SELECT
  S.ID AS STANDORT_ID,
  VR.VR_RAUM_NAME,
  VR.VR_AKTIV,
  G.GEBAEUDE || '_' || E.ETAGE  || '_' || R.SEKTOR || R.RAUM || '_' || R.UNTER AS RAUM_NR_GES_GEB,
  G.GEBAEUDE || R.SEKTOR || '.' || E.ETAGE  || '.' ||  R.RAUM || '.' || R.UNTER AS RAUM_NR_PUNKT,
  PCK_CRESTRONFUSION_EXPORT.GET_RAUM_VERRAUM_BEZ(RIR.RAUM_ID) AS RAUM_VERRAUM_BEZ,
  R.BEZEICHNUNG AS RAUM_BEZ,
  VR.VR_ID AS VERANST_RAUM_ID,
  RIR.RAUM_ID AS RAUM_ID
  FROM (SELECT  VR.BEZEICHNUNG1 AS VR_RAUM_NAME,  VR.ID AS VR_ID, VR.AKTIV  AS VR_AKTIV
        FROM ORA_MIGRA.VERANST_RAUM VR, ORA_MIGRA.RAUM_TYP RT
        WHERE VR.RAUM_TYP_ID = RT.ID
        AND RT.BEZEICHNUNG <> 'BÜRO'
        AND VR.DELDAT IS NULL
        AND VR.AKTIV = 'J') VR, ORA_MIGRA.RAUM_IN_VERANST_RAUM RIR,
    ORA_MIGRA.STANDORT S, ORA_MIGRA.GEBAEUDE G, ORA_MIGRA.ETAGE E, ORA_MIGRA.RAUM R WHERE
     VR.VR_ID = RIR.VERANST_RAUM_ID
     AND RIR.RAUM_ID = R.ID
     AND R.ETAGEID = E.ID
     AND E.GEBAEUDEID = G.ID
     AND G.STANDORTID = S.ID
      AND S.ID IN (SELECT WS.STANDORT_ID FROM ORA_MIGRA.WEB_STANDORT WS WHERE WS.SICHTBAR_IM_WEB = 'J')
    -- AND S.ID IN (1, 2, 23, 63, 245) -- NUR BIBERACHER, INGELHEIMER, DORTMUNDER, WIENER UND MAINZER
;

  CREATE OR REPLACE FORCE EDITIONABLE VIEW ORA_MIGRA.CRESTRON_FUSION_EXP_FILE (RAUM_ID, BEGINN_TERMIN_DATE, BEGINN_PUFFER_DATE, BEGINN_PUFFER_DATUM_CHAR, BEGINN_PUFFER_ZEIT_NORM, ENDE_TERMIN_DATE, ENDE_TERMIN_DATUM_CHAR, ENDE_TERMIN_ZEIT_NORM, THEMA_NORM, MITARBEITER_ID, BETREUER, VR_RAUM_NAME, VERANSTALTUNG_STATUS) AS 
  select  CRESTRON_FUSION_RAUM.RAUM_ID,
        veranst.beginn_termin as beginn_termin_Date,
        veranst.BEGINN_PUFFER as beginn_puffer_date,
        to_char(veranst.BEGINN_PUFFER,'mm/dd/yyyy') as BEGINN_PUFFER_Datum_Char,
        to_char(trunc(veranst.BEGINN_PUFFER) +  (trunc((veranst.BEGINN_PUFFER - trunc(veranst.BEGINN_PUFFER)) * 24 * 2 ))/(24 * 2),'HH24:MI:SS') as beginn_PUFFER_Zeit_norm,
        veranst.ENDE_TERMIN as ende_termin_date,
        to_char(veranst.ENDE_TERMIN,'mm/dd/yyyy') as ENDE_TERMIN_Datum_Char,
        to_char(PCK_CrestronFusion_EXPORT.round_up_half_hour(veranst.ENDE_TERMIN),'HH24:MI:SS') as ENDE_TERMIN_Zeit_norm,
        replace(replace(replace(replace(veranst.THEMA,chr(09),''),chr(10),''),chr(13),''),';',' ') as thema_norm,
        veranst.MITARBEITER_ID,
        veranst.BETREUER,
        CRESTRON_FUSION_RAUM.VR_RAUM_NAME,
        veranst.Veranstaltung_Status
        from (select b.BEGINN_PUFFER, b.BEGINN_TERMIN, b.ENDE_TERMIN, V.THEMA,
              v.MITARBEITER_ID, BETREUER, b.VERANST_RAUM_ID, V.STATUS as Veranstaltung_Status
              from ORA_MIGRA.BESTELLUNG b, ORA_MIGRA.VERANSTALTUNG v where
              b.VERANSTALTUNG_ID = v.id
              and b.dienst_typ = 'R' -- Veranst-Raum
              and V.STATUS IN ('E','B')
              and b.BESTAET_STATUS <> 'S'
              and b.ENDE_TERMIN >= trunc(sysdate) - 21) veranst, CRESTRON_FUSION_RAUM
        where CRESTRON_FUSION_RAUM.VERANST_RAUM_ID = veranst.VERANST_RAUM_ID
;   


  CREATE OR REPLACE NONEDITIONABLE PROCEDURE ORA_MIGRA.SECURE_DML 
IS  
BEGIN  
  IF TO_CHAR (SYSDATE, 'HH24:MI') NOT BETWEEN '08:00' AND '18:00'  
        OR TO_CHAR (SYSDATE, 'DY') IN ('SAT', 'SUN') THEN  
	RAISE_APPLICATION_ERROR (-20205,   
		'You may only make changes during normal office hours');  
  END IF;  
END secure_dml; 
/

  CREATE OR REPLACE NONEDITIONABLE PROCEDURE ORA_MIGRA.SECURE_DML_NEW 
IS  
BEGIN  
  IF TO_CHAR (SYSDATE, 'HH24:MI') NOT BETWEEN '08:00' AND '18:00'  
        OR TO_CHAR (SYSDATE, 'DY') IN ('SAT', 'SUN') THEN  
	RAISE_APPLICATION_ERROR (-20205, 'You may only make changes during normal office hours');  
  END IF;  
END secure_dml_new; 
/

  CREATE OR REPLACE NONEDITIONABLE PROCEDURE ORA_MIGRA.SAVE_SOLID (len INTEGER, wid INTEGER, hgt INTEGER)  
IS  
BEGIN  
    DECLARE
      solid solid_typ;
      vol INTEGER;
    BEGIN -- PL/SQL block for selecting a solid and displaying details
      solid:=solid_typ(len,wid,hgt);
      vol:= solid.volume();

      INSERT INTO solids (length, width , height , volume )
        values (solid.len,solid.wth,solid.hgt,vol);
      commit;
    END;
END save_solid; 
/

  CREATE OR REPLACE NONEDITIONABLE PROCEDURE ORA_MIGRA.ADD_JOB_HISTORY 
  (  p_emp_id          job_history.employee_id%type
   , p_start_date      job_history.start_date%type
   , p_end_date        job_history.end_date%type
   , p_job_id          job_history.job_id%type
   , p_department_id   job_history.department_id%type
   )
IS
BEGIN
  INSERT INTO job_history (employee_id, start_date, end_date,
                           job_id, department_id)
    VALUES(p_emp_id, p_start_date, p_end_date, p_job_id, p_department_id);
END add_job_history;
/

  CREATE OR REPLACE NONEDITIONABLE PROCEDURE ORA_MIGRA.SAMPLE_PROC 
IS
BEGIN 
   -- enable the buffer with default size 20000 
   dbms_output.enable; 

   dbms_output.put_line('Hello Reader!'); 
   dbms_output.put_line('Hope you have enjoyed the tutorials!'); 
   dbms_output.put_line('Have a great time exploring pl/sql!');     
END;
/


  CREATE OR REPLACE NONEDITIONABLE FUNCTION ORA_MIGRA.GET_FULL_NAME (emp_id in number) RETURN Varchar2 IS
lv_full_name Varchar2(50):= Null;
Begin
Select First_name||' '||Last_name 
Into lv_full_name
from employees 
Where Employee_id=emp_id;
return lv_full_name;
Exception
When No_data_found Then
Return 'Invalid Id';
When Others Then
Return 'Error';
End get_full_name;
/

  CREATE OR REPLACE NONEDITIONABLE FUNCTION ORA_MIGRA.SAMPLE_JAVA_PROC RETURN VARCHAR2
AS LANGUAGE JAVA
NAME 'JavaProcSample.quote() return java.lang.String';
/

  CREATE OR REPLACE NONEDITIONABLE FUNCTION ORA_MIGRA.GET_VERANSTRAUM_SEKTOR (
AVeranstRaumId VERANST_RAUM.ID%type
) RETURN varchar AS
-- -----------------------------------------------------------------------------
-- Ermittelt den Sektor eines V-Raums aus den zugeordneten BAGS-RÄUMEN
-- -----------------------------------------------------------------------------
s RAUM.SEKTOR%type;
BEGIN
  SELECT min(RM.SEKTOR) into s
  FROM VERANST_RAUM V, RAUM_IN_VERANST_RAUM R, RAUM RM
  WHERE V.ID = R.VERANST_RAUM_ID
  AND V.ETAGE_ID = R.ETAGE_ID
  AND RM.ID = R.RAUM_ID
  AND RM.ETAGEID = R.ETAGE_ID
  AND v.ID = AVeranstRaumId
  and RM.SEKTOR IS not null;
return s;
exception when no_data_found then
    return null;
END;
/

  CREATE OR REPLACE NONEDITIONABLE FUNCTION ORA_MIGRA.ETAGENSORTIERFOLGE (
  iETAGENNUMMER IN VARCHAR2 )
RETURN number IS
/* 28.6.99 von Eckelmann; bei leeren Sortierfolge wird 99 zurückgegeben
   29.6.99 Rje/Eckelmann return number statt varchar2
*/
cursor c1(cETAGENNUMMER IN VARCHAR2) is
   SELECT sortierfolge
   FROM
      etagennummern
   WHERE
      etagennummer = cEtagennummer;
iSortierfolge etagennummern.sortierfolge%type;
BEGIN
   open c1(ietagennummer);
   fetch c1 into iSortierfolge;
   if c1%notfound or iSortierfolge is null then
     iSortierfolge := 99;
   end if;
   close c1;
   RETURN(isortierfolge);
END;
/


CREATE OR REPLACE NONEDITIONABLE PACKAGE ORA_MIGRA.EMP_SAL AS 
   PROCEDURE find_sal(e_id EMPLOYEES.EMPLOYEE_ID%type); 
END emp_sal;
/

CREATE OR REPLACE NONEDITIONABLE PACKAGE BODY ORA_MIGRA.EMP_SAL AS  
   
   PROCEDURE find_sal(e_id EMPLOYEES.EMPLOYEE_ID%TYPE) IS 
   e_sal EMPLOYEES.SALARY%TYPE; 
   BEGIN 
      SELECT SALARY INTO e_sal 
      FROM EMPLOYEES 
      WHERE EMPLOYEE_ID = e_id; 
      -- create temp table
      /*
        create a new table here      
      */
      dbms_output.put_line('Salary: '|| e_sal); 
   END find_sal; 
END emp_sal; 
/

  CREATE OR REPLACE NONEDITIONABLE PACKAGE ORA_MIGRA.PCK_ABRECHNUNG AS
-- RJE 23.07.2015 angelegt.

function Storno_fuer_Leist_faellig_JN ( p_Leistung_ID in BESTELL_POSITION.Leistung_ID%type,
                                        p_Bestellung_Id in BESTELL_POSITION.Bestellung_id%type)
                                           return varchar2;
function Storno_fuer_V_Raum_faellig_JN (p_Veranst_Raum_ID in BESTELLUNG.VERANST_RAUM_ID%type,
                                        p_Best_Beginn_Termin in BESTELLUNG.Beginn_Termin%type)
                                           return varchar2;
function Calc_V_Raum_Best_Preis_Storno (p_Veranst_Raum_ID in VERANST_RAUM.ID%type,
                                       p_Bestell_Beginn_Termin in bestellung.beginn_Termin%type,
                                       p_Bestell_Ende_Termin in bestellung.ende_Termin%type) return number;


function Get_V_Raum_Best_Preis_Normal (p_Veranst_Raum_ID in bestellung.VERANST_RAUM_ID%type,
                                       p_Bestell_Beginn_Termin in bestellung.beginn_Termin%type,
                                       p_Bestell_Ende_Termin in bestellung.ende_Termin%type) return number;


end;
/

CREATE OR REPLACE NONEDITIONABLE PACKAGE BODY ORA_MIGRA.PCK_ABRECHNUNG AS
-- RJE 23.07.2015 Funktionen zur Preis- und Stornoberechnung
-- RJe 29.07.2015 überarbeitet
-- Rje 30.07.2015 Storno_fuer_Leist_faellig_JN überarbeitet
 
function Storno_fuer_Leist_faellig_JN ( p_Leistung_ID in BESTELL_POSITION.Leistung_ID%type,
                                        p_Bestellung_Id in BESTELL_POSITION.Bestellung_id%type)
                                           return varchar2 as
-- RJE 23.07.2015 Neu angelegt.
-- RJe 30.07.2015 Falls BEGINN_STORNOZEIT null ist, ist der Stornozeitpunkt egal, und es wird Storno fällig.
-- Aufruf ist NUR zum Stornierungszeitpunkt einer Leistung sinnvoll, weil sysdate
--   Prüft NUR ob für diese Bestell_Position Stornogebühren fällig werden bei der Stornierung.
--   Falls ja, darf die Bestell_Position nicht gelöscht werden, und die Stornogebühren müssen eingetragen werden.
--   Wird von Bestell_Position Trigger beim Statuswechsel aufgerufen, deshalb kann hier mit sysdate gearbeitet werden.
-- Stornogebühr ist fällig falls:
--      die Bestellung bestätigt ist
--      bei der Leistung eine Stornogebuehr eingetragen ist
--      (der Stornierungszeitpunkt innerhalb des Stornierungszeitraums liegt
--           oder BEGINN_STORNOZEIT null ist)
-- Rückgabewert: J: Stornogebühr ist fällig; N: keine Stornogebühr fällig.
--
  v_STORNOGEBUEHR leistung.STORNOGEBUEHR%type;
  v_BEGINN_STORNOZEIT leistung.BEGINN_STORNOZEIT%type;
  v_Bestell_BEGINN_TERMIN bestellung.BEGINN_TERMIN%type;
  v_Bestell_Bestaet_Status bestellung.Bestaet_Status%type;

  -- In welchem Bestellungs-Status wird eine Stornogebühr fällig:
  c_Bestell_Bestaet_Status_ST_J  bestellung.Bestaet_Status%type := 'J';

  v_RetVal varchar2(1);

  v_Meld_Wo varchar2(10);

begin
   -- Per Default N zurückgeben
   v_RetVal := 'N';
   v_Meld_Wo := 'AA';
   select l.STORNOGEBUEHR, l.BEGINN_STORNOZEIT into v_STORNOGEBUEHR, v_BEGINN_STORNOZEIT
      from leistung l where l.id = p_Leistung_ID;

   v_Meld_Wo := 'BB';
   select b.BEGINN_TERMIN, b.Bestaet_Status into v_Bestell_BEGINN_TERMIN, v_Bestell_Bestaet_Status
      from bestellung b where b.id = p_Bestellung_Id;

   v_Meld_Wo := 'CC';
   if v_Bestell_Bestaet_Status = c_Bestell_Bestaet_Status_ST_J then
     v_Meld_Wo := 'DD';
     -- Falls v_STORNOGEBUEHR NULL ist, wird KEINE Stornogebühr verlangt!
     if v_STORNOGEBUEHR is NOT null then
        v_Meld_Wo := 'D1';
        if v_BEGINN_STORNOZEIT is NULL then
           v_Meld_Wo := 'D2';
           -- Storno ist fällig
           v_RetVal := 'J';
        else
          -- Prüfen ob wir im Stornozeitraum liegen
          --    v_BEGINN_STORNOZEIT ist in Stunden
          if sysdate + (v_BEGINN_STORNOZEIT/24) > v_Bestell_BEGINN_TERMIN then
             v_Meld_Wo := 'D2';
             v_RetVal := 'J';
          end if;
        end if;  -- v_BEGINN_STORNOZEIT is NULL
     end if;
   end if;
   return v_RetVal;

 exception
     when no_data_found then
        raise_application_error(-20606, 'Fehler no_data in Function PCK_Abrechnung.Storno_fuer_Leist_faellig_JN (' || v_Meld_Wo ||
           '). Error: ' || substr(dbms_utility.FORMAT_ERROR_BACKTRACE,1,300));
         return 'N';
    when others then
        raise_application_error(-20607, 'Fehler in Function PCK_Abrechnung.Storno_fuer_Leist_faellig_JN (' || v_Meld_Wo ||
           '). Error: ' || substr(dbms_utility.FORMAT_ERROR_BACKTRACE,1,300));
        return 'N';
 end Storno_fuer_Leist_faellig_JN;
 -- ******************************************************************************************
function Storno_fuer_V_Raum_faellig_JN (p_Veranst_Raum_ID in BESTELLUNG.VERANST_RAUM_ID%type,
                                        p_Best_Beginn_Termin in BESTELLUNG.Beginn_Termin%type)
                                           return varchar2 as
-- RJE 23.07.2015 Neu angelegt.
-- Aufruf ist NUR zum Stornierungszeitpunkt eines Veranstaltungsraumes
-- (=Bestellung zu einem Veranst-Raum) sinnvoll, weil sysdate verwendet wird.
--   Prüft NUR ob für diese V_Raum_Bestellung Stornogebühren fällig werden bei der Stornierung.
--   Wird von Bestellung Trigger beim Statuswechsel aufgerufen, deshalb kann hier mit sysdate gearbeitet werden.
-- Stornogebühr ist fällig falls:
--      VERANST_RAUM.STORNOGEBUEHR (=Prozentwert) is not null
--        Falls VERANST_RAUM.STORNOZEITRAUM gefüllt ist, muss der Stornierungszeitpunkt darin liegen.
--        Falls VERANST_RAUM.STORNOZEITRAUM NICHT gefüllt ist, fallen unabhängig vom
--                  Zeitraum Stornogebühren an.
-- Rückgabewert: J: Stornogebühr ist fällig; N: keine Stornogebühr fällig.
--
  v_V_Raum_Stornogebuehr        VERANST_RAUM.STORNOGEBUEHR%type;
  v_V_Raum_Stornozeitraum       VERANST_RAUM.STORNOZEITRAUM%type;



  v_RetVal varchar2(1);

  v_Meld_Wo varchar2(10);

    begin
   -- Per Default N zurückgeben
   v_RetVal := 'N';
   v_Meld_Wo := 'AA';
   select vr.STORNOGEBUEHR, vr.STORNOZEITRAUM into v_V_Raum_Stornogebuehr, v_V_Raum_Stornozeitraum
      from VERANST_RAUM vr where vr.id = p_Veranst_Raum_ID;

   v_Meld_Wo := 'BB';
   -- NUR falls VERANST_RAUM.STORNOGEBUEHR is NOT NULL können Stornogebühren anfallen:
   if v_V_Raum_Stornogebuehr is NOT null then
      v_Meld_Wo := 'CC';
      -- Gilt eine Zeitraum Logik?
      if v_V_Raum_Stornozeitraum is NOT null then
         v_Meld_Wo := 'DD';
         -- Zeitraumlogik, also prüfen, ob gerade eben (sysdate) Stornogebühren fällig werden:
         -- v_V_Raum_Stornozeitraum wird in TAGEN angegeben, deshalb ein trunc(sysdate)
         if trunc(sysdate) between (p_Best_Beginn_Termin - v_V_Raum_Stornozeitraum) and p_Best_Beginn_Termin then
            v_Meld_Wo := 'EE';
            --Stornozeit innerhalb Stornozeitraum
            v_RetVal := 'J';
         else
            v_Meld_Wo := 'FF';
            v_RetVal := 'N';
         end if;
      else
         -- Keine Zeitraum-Logik für die Stornogebühr, also wird Stornogebühr fällig:
         v_Meld_Wo := 'GG';
         v_RetVal := 'J';
      end if;
      v_Meld_Wo := 'HH';
   else
      v_Meld_Wo := 'II';
      v_RetVal := 'N';
   end if;

   return v_RetVal;

 exception
     when no_data_found then
        raise_application_error(-20606, 'Fehler NO_DATA in Function PCK_Abrechnung.Storno_fuer_V_Raum_faellig_JN (' || v_Meld_Wo ||
           '). Error: ' || substr(dbms_utility.FORMAT_ERROR_BACKTRACE,1,300));
         return 'N';
    when others then
        raise_application_error(-20607, 'Fehler in Function PCK_Abrechnung.Storno_fuer_V_Raum_faellig_JN (' || v_Meld_Wo ||
           '). Error: ' || substr(dbms_utility.FORMAT_ERROR_BACKTRACE,1,300));
        return 'N';
 end Storno_fuer_V_Raum_faellig_JN;
-- ******************************************************************************************
function Get_V_Raum_Best_Preis_Normal (p_Veranst_Raum_ID in bestellung.VERANST_RAUM_ID%type,
                                       p_Bestell_Beginn_Termin in bestellung.beginn_Termin%type,
                                       p_Bestell_Ende_Termin in bestellung.ende_Termin%type) return number as
-- RJE 23.07.2015 Neu angelegt. Gibt den Normalpreis (NICHT Storno) für eine
--     Veranst_Raum_Bestellung zurück.

  v_Meld_Wo varchar2(10);

  -- Nutzungspauschale für den GESAMT-V_Raum und Stunde:
  v_Nutzpausch_V_Raum_Ges_Stunde number;
  -- Anzahl der Kostenbelastungs-Stunden; Ein Veranst_Raum verursacht nur VERANST_RAUM.KOSTENBELASTUNG_VON .. Bis)
  --     eine Kostenbelastung
  v_Anz_Kostenbel_Stunden number;
  v_Preis_Normal number;

begin
   v_Preis_Normal := null;
   v_Meld_Wo := 'AAA';

   if p_Veranst_Raum_ID is NOT null and p_Bestell_Beginn_Termin is not null
          and p_Bestell_Ende_Termin is not null then
      v_Meld_Wo := 'BBB';
      -- In der Veranst_Raum.NUTZUNGSPAUSCHALE stehen die Euro pro qm und Stunde
      --   GET_KOSTEN_PRO_RAUM macht das mal Anz_QM,
      --      also kommen die Euro für den Gesamtraum pro Stunde raus.
      --v_Nutzpausch_V_Raum_Ges_Stunde := GET_KOSTEN_PRO_RAUM(p_Veranst_Raum_ID,
                                                              -- p_Bestell_Beginn_Termin,
                                                              -- p_Bestell_Ende_Termin);
      -- Anzahl der Kostenbelastungs-Stunden. GET_SUMME_ZEIT_PRO_RAUM2
      --    gibt Tage zurück, deshalb * 24
      -- v_Anz_Kostenbel_Stunden := GET_SUMME_ZEIT_PRO_RAUM2(p_Veranst_Raum_ID,
                                                          -- p_Bestell_Beginn_Termin,
                                                          -- p_Bestell_Ende_Termin) * 24;

      v_Preis_Normal := v_Nutzpausch_V_Raum_Ges_Stunde * v_Anz_Kostenbel_Stunden;
      v_Meld_Wo := 'CCC';
   end if;

   v_Meld_Wo := 'DDD';

   return v_Preis_Normal;
 exception
     when no_data_found then
        raise_application_error(-20606, 'Fehler no_data in Function PCK_Abrechnung.Get_V_Raum_Best_Preis_Normal (' || v_Meld_Wo ||
           '). Error: ' || substr(dbms_utility.FORMAT_ERROR_BACKTRACE,1,300));
         return null;
    when others then
        raise_application_error(-20607, 'Fehler in Function PCK_Abrechnung.Get_V_Raum_Best_Preis_Normal (' || v_Meld_Wo ||
           '). Error: ' || substr(dbms_utility.FORMAT_ERROR_BACKTRACE,1,300));
        return null;

end Get_V_Raum_Best_Preis_Normal;

    function Calc_V_Raum_Best_Preis_Storno (p_Veranst_Raum_ID in VERANST_RAUM.ID%type,
                                       p_Bestell_Beginn_Termin in bestellung.beginn_Termin%type,
                                       p_Bestell_Ende_Termin in bestellung.ende_Termin%type) return number as
-- RJE 23.07.2015 Neu angelegt. BERECHNET den Stornopreis (NICHT Normalpreis) für
--    eine Veranstaltungs-Raum-Bestellung und gibt diesen zurück.
-- der Aufruf ist NUR sinnvoll zum Stornierungszeitpunkt, weil der Stornopreis in der Spalte
-- bestellung.VERANST_RAUM_STORNO_GEB_EURO gespeichert wird.

  v_Meld_Wo varchar2(10);

  v_Preis_Normal number;

  v_Stornogebuehr_Proz    VERANST_RAUM.STORNOGEBUEHR%type;
  v_Preis_Storno number;

begin
   v_Preis_Normal := null;
   v_Preis_Storno := null;
   v_Meld_Wo := 'AAA';
   v_Preis_Normal := PCK_Abrechnung.Get_V_Raum_Best_Preis_Normal (p_Veranst_Raum_ID,
                                       p_Bestell_Beginn_Termin,
                                       p_Bestell_Ende_Termin);
   if v_Preis_Normal > 0 then
      --
      select vr.STORNOGEBUEHR into v_Stornogebuehr_Proz from VERANST_RAUM vr where
          vr.id = p_Veranst_Raum_ID;
      v_Preis_Storno := v_Preis_Normal * v_Stornogebuehr_Proz / 100;

   end if;

   return v_Preis_Storno;

 exception
     when no_data_found then
        raise_application_error(-20606, 'Fehler no_data in Function PCK_Abrechnung.Calc_V_Raum_Best_Preis_Storno (' || v_Meld_Wo ||
           '). Error: ' || substr(dbms_utility.FORMAT_ERROR_BACKTRACE,1,300));
         return null;
    when others then
        raise_application_error(-20607, 'Fehler in Function PCK_Abrechnung.Calc_V_Raum_Best_Preis_Storno (' || v_Meld_Wo ||
           '). Error: ' || substr(dbms_utility.FORMAT_ERROR_BACKTRACE,1,300));
        return null;

end Calc_V_Raum_Best_Preis_Storno;
end PCK_Abrechnung;
/

  CREATE OR REPLACE NONEDITIONABLE PACKAGE ORA_MIGRA.GLO_TYPE AS
-- ------------------------------------------------- (c) NIS Rheinsberg GmbH ---
-- PL/SQL PACKAGE : GLO_TYPE
-- BESCHREIBUNG   : Allgemeine Typ-Definitionen
-- HISTORIE       : 18.02.1999 hh Erstellung
-- -----------------------------------------------------------------------------
-- PL/SQL-Table aus Id's, für das Umgehen des 'Mutating Table' Problems.
-- Dazu können in einem Row-Level-Trigger einzelne ID's in so einem Table
-- gesichert werden und anschließend in einem After-Statement-Trigger gelesen
-- und verarbeitet werden.
--
TYPE TNumberTable
IS TABLE OF Number NOT NULL INDEX BY BINARY_INTEGER;
--
TYPE TVarcharTable
IS TABLE OF Varchar2(2000) NOT NULL INDEX BY BINARY_INTEGER;
--
--globaler Typ
TEmailAdresse varchar2(1000);
--subtype TEmailAdresse is VARCHAR2(1000);
--
END;
/

CREATE OR REPLACE NONEDITIONABLE PACKAGE BODY ORA_MIGRA.GLO_TYPE AS
-- This is a copy of the Hora PACKAGE BODY default template. Please modify file
-- D:\Programme\KeepTool\Hora4\Templates\ or change file name in the registry below
-- HKEY_CURRENT_USER\Software\KeepTool\Hora\3.0\Forms\dmPlSql\Templates
END;
/

  CREATE OR REPLACE NONEDITIONABLE PACKAGE ORA_MIGRA.TAB_DATEI_AUSGABE AS
-- ------------------------------------------------- (c) NIS Rheinsberg GmbH ---
-- PL/SQL PACKAGE : DATEI_AUSGABE
-- BESCHREIBUNG   : Dateiausgabe
-- HISTORIE       : 09.12.1999 hh Erstellung
--                  19.12.2012 hp Fix Übergabe ABemerkung auf 256 Zeichen reduziert
-- -----------------------------------------------------------------------------
--
-- Beispiel:
-- begin
--   tab_datei_ausgabe.BeginDatei( 'besteller@boehrringer-ingelheim.com', 4711, 'EMail', 'C:\Temp\Test.txt');
--   tab_datei_ausgabe.WriteLine( 'Erste Zeile in der EMail');
--   ...
--   tab_datei_ausgabe.WriteLine( 'Letzte Zeile in der EMail');
--   tab_datei_ausgabe.Abschicken;
-- exception
--   when others then
--     tab_datei_ausgabe.Verwerfen;
--     raise;
-- end;
--
  procedure BeginDatei(
    ABemerkung in datei_ausgabe.bemerkung%type,
    AReferenzId in datei_ausgabe.REFERENZ_ID%TYPE,
    ADateiTyp datei_ausgabe.DATEI_TYP%type,
    ADateiName datei_ausgabe.datei_name%type);
  procedure WriteLine( ALine in varchar2);
  --wenn der Text gleich als CLOB vorliegt
  procedure WriteTextAsClob( ATextField in clob);
  procedure Abschicken;
  procedure Verwerfen;
  procedure WriteToFile( AId in datei_ausgabe.id%type);
END;
/

CREATE OR REPLACE NONEDITIONABLE PACKAGE BODY ORA_MIGRA.TAB_DATEI_AUSGABE AS
  FClob CLob;
  FCRLF Varchar2(2):= chr(13)||chr(10);
  FBemerkung datei_ausgabe.bemerkung%type;
  FReferenzId datei_ausgabe.REFERENZ_ID%type;
  FDateiTyp datei_ausgabe.DATEI_TYP%type;
  FDateiName datei_ausgabe.datei_name%type;
procedure BeginDatei(
  ABemerkung in datei_ausgabe.bemerkung%type,
  AReferenzId in datei_ausgabe.REFERENZ_ID%TYPE,
  ADateiTyp datei_ausgabe.DATEI_TYP%type,
  ADateiName datei_ausgabe.datei_name%type)
is
begin
  dbms_lob.createtemporary( FClob, True, DBMS_LOB.SESSION);
--  nur für 8.0.5 Kompatibilität
--  dbms_lob.createtemporary( FClob, True, 10);
  FBemerkung := substr(ABemerkung,1,255);
  FReferenzId := AReferenzId;
  FDateiTyp := ADateiTyp;
  FDateiName := ADateiName;
end;
--neue Version fü 8.0.5 Kompatibilität
/*
procedure WriteLine( ALine in varchar2)
is
  Amount Binary_Integer;
  TempCLob Clob;
begin
   --Zwischen Variable
   TempCLob := null;
	dbms_lob.createtemporary( TempCLob, True, 10);
  if ALine is null
  then
     Amount := 1;
  	  dbms_lob.write(TempCLob,  Amount, Amount ,''|| FCRLF);
  else
     Amount := Length(ALine) + 2 ;
	  dbms_lob.write(TempCLob,  Amount , Amount ,ALine|| FCRLF);
  end if;
   --Anfügen
   dbms_lob.append( FClob, TempCLob);
end;*/
--Version für 8.1.5.
procedure WriteLine( ALine in varchar2)
is
  Amount Binary_Integer;
begin
  if ALine is null
  then
     Amount := 0;
  else
     Amount := Length(ALine);
  end if;
  dbms_lob.writeappend( FClob, Amount+2, ALine || FCRLF);
end;
--wenn der Text gleich als CLOB vorliegt
procedure WriteTextAsClob( ATextField in clob)
is
  Amount Binary_Integer;
begin
  Amount := dbms_lob.GETLENGTH(ATextField);
  dbms_lob.writeappend( FClob, Amount, ATextField);
end;
--
procedure Abschicken
is
begin
  insert into datei_ausgabe (DATEI_NAME, DATEI_INHALT, DATEI_TYP, REFERENZ_ID, BEMERKUNG)
  values( FDateiName, FClob, FDateityp, FReferenzId, FBemerkung);
  FBemerkung := null;
  FReferenzId := null;
  FDateiTyp := null;
--  dbms_lob.close( FClob);
end;
procedure Verwerfen
is
begin
  FBemerkung := null;
  FReferenzId := null;
  FDateiTyp := null;
--  dbms_lob.close( FClob);
end;
procedure WriteToFile( AId in datei_ausgabe.id%type)
is
  Buffer Varchar2(20);
  Pos Number;
  Amount binary_integer;
  DateiInhalt CLob;
  DateiName varchar2(256);
begin
  SELECT DATEI_INHALT, DATEI_NAME into DateiInhalt, DateiName FROM datei_ausgabe WHERE ID = AId;
  Amount := 200;
  Pos := 1;
  begin
    loop
      Amount := dbms_lob.instr( DateiInhalt, FCrLf, Pos+1, 1)-Pos;
      if Amount+1 >= dbms_lob.getlength( DateiInhalt) then
        Amount := dbms_lob.getlength( DateiInhalt) - Pos +2;
      end if;
      if Amount <= 0 then
        raise no_data_found;
      end if;
			Buffer := '';
      dbms_lob.read( DateiInhalt, Amount, Pos, Buffer);
      Pos := Pos + Amount+2;
      dbms_output.put_line( Buffer);
    end loop;
  exception
    when no_data_found then
      null;
  end;
end;
END;

/

CREATE OR REPLACE NONEDITIONABLE PACKAGE ORA_MIGRA.PCK_CRESTRONFUSION_EXPORT AUTHID DEFINER  AS
/*
MNI 24.01.2018 - Als Kopie von CARA_AMZEIGE_HEADLINE angelegt und verändert

-- Pro PHYSIKALISCHEM Raum wird je eine Datei für Crestron Panel-Anzeige angelegt

-- Logik:
-- Pro PHYSIKALISCHER Raum wird je eine Datei angelegt
Dateiname:
[Raumbezeichnung]+[.cre]          // Raumbezeichnung:  Gebäude_Stockwerk_Sektor_Nummer
Beispiel: G91_00_A010_00.cre

-- Inhalt: gerade laufende, oder zukünftige Veranstaltungen


Dateiaufbau nach folgendem Schema:
  Erste Zeile enthält Überschrift mit Bsp:
     G71.02.096.00;G71.02 Berkeley (16 P.)
         -- Raumnummer ohne Standort analog zum Filename, aber mit . statt _
         -- Name des Veranstatlungsraumes, in dem dieser Raum als EINZIGER Raum enthalten ist.
  Aller weiteren Zeilen:
-    Elemente in einer Zeile werden mit Strichpunkte(;) getrennt
-    Dateiaufbauschema nicht in Datei enthalten
-    Sortiert nach Beginn_Datum, dann nach Beginn_Zeit
-    Daten von gestern sollen nicht mehr enthalten sein
-    Mindestbelegungszeit: 30 min, d.h. falls vom Anwender in Carmen anders gebucht (z.B. 08:12), dann sollte folgendermaßen gerundet werden:
-    Beginn_Zeit = 08:12  ? vorziehen = 08:00
-    Ende_Zeit    = 08:15  ? nachziehen = 08:30

Ramses Datenbank Logik;
Für eine Veranstaltung können mehrere Bestellung für Veranst_Räume (Dienst_Typ = R) vorliegen.
Eine Bestellung definiert Beginn und Ende in einem Veranst-Raum

*/
procedure Create_CrestronFusion_ExpFiles;
function get_next_execution_time (p_ab in date) return date;
function Get_Marb_Name_from_ID (p_M_ID MITARBEITER.ID%TYPE) RETURN varchar2;
function round_up_half_hour(p_date IN date) RETURN date;
function get_raum_verraum_bez (p_raumid in RAUM_IN_VERANST_RAUM.RAUM_ID%type) return VERANST_RAUM.bezeichnung1%type;
END;
/

CREATE OR REPLACE NONEDITIONABLE PACKAGE BODY ORA_MIGRA.PCK_CRESTRONFUSION_EXPORT AS

-- Pro PHYSIKALISCHEM Raum wird je eine Datei für die Panel-Anzeige angelegt
-- Historie:    24.01.2018 MNI ErstErstellung
-- Änderungen:

const_CrestronFusion_Datei_TYP varchar2(10) := 'CRE'; -- Für FileExtension und Eintrag in Datei_Ausgabe
const_Delim varchar2(1) := ',';

-- NICHT am Wochenende und nicht in der Nacht
--  D: Tag der Woche, beginnend mit dem ersten Tag der Woche (dies variiert in Abhängigkeit der NLS-Einstellungen - in DE ist dies der Montag, in USA der Sonntag)
-- select to_char(sysdate,'D') from dual;
const_aktualisieren_von varchar2(15) := '06:00:00';
const_aktualisieren_bis varchar2(15) := '20:00:00';
-- Die Wochentage stehen DIREKT in der Routine get_next_execution_time, weil ein alter session in Kombination mit einem Job nicht geht.
-- die Datenbank und die Session darf NICHT auf nls_territory=German eingestellt sein, sonst ist der Montag der erste Tag!

-- Wer bekommt die Error Mail, falls etwas schief geht?
const_Error_Mail_Empfaenger varchar2(60) := 'HERKOMME;NIESSER;JERGRO';
const_Error_Mail_File_Prae varchar2(150) := '\\BIBFS03\DATA1\\SERVICE\MAILSERV\ramses\Err_';

function get_ascii_Dir_name (p_standort_ID in number) return varchar2 is
/*
*/

const_ASCII_Dir_Biberach varchar2(300) := '\\INHAS64266\CarmenExports\bib\';
const_ASCII_Dir_Ingelheim varchar2(300) := '\\INHAS64266\CarmenExports\ing\';
const_ASCII_Dir_Dortmund varchar2(300) := '\\INHAS64266\CarmenExports\dtm\';
const_ASCII_Dir_Wien varchar2(300) := '\\INHAS64266\CarmenExports\vie\';
const_ASCII_Dir_Hannover varchar2(300) := '\\INHAS64266\CarmenExports\haj\';
const_ASCII_Dir_Mainz varchar2(300) := '\\INHAS64266\CarmenExports\maz\';
const_ASCII_Dir_ERROR varchar2(300) := '\\INHAS64266\CarmenExports\ERROR\';

v_ret_Ascii_Dir varchar2(300);

begin

  CASE  p_standort_ID
     WHEN 1 THEN v_ret_Ascii_Dir := const_ASCII_Dir_Biberach;
     WHEN 2 THEN v_ret_Ascii_Dir := const_ASCII_Dir_Ingelheim;
     WHEN 23 THEN  v_ret_Ascii_Dir := const_ASCII_Dir_Dortmund;
     WHEN 63 THEN  v_ret_Ascii_Dir := const_ASCII_Dir_Wien;
     WHEN 107 THEN  v_ret_Ascii_Dir := const_ASCII_Dir_Hannover;
     WHEN 245 THEN  v_ret_Ascii_Dir := const_ASCII_Dir_Mainz;
     ELSE v_ret_Ascii_Dir := const_ASCII_Dir_ERROR;
  END CASE;

  return v_ret_Ascii_Dir;

exception
   when others then
      v_ret_Ascii_Dir := const_ASCII_Dir_ERROR;
      return v_ret_Ascii_Dir;

end get_ascii_Dir_name;


FUNCTION round_up_half_hour(p_date IN date) RETURN date IS
   l_result date;
-- rundet auf halbe Stunden auf. Aus 18:12 wird 18:30
-- RUNDEN darf nur 4 Nachkommastellen haben, sonst rundet oracle immer noch falsch
   l_anz_halbe_stunden number(28,10);
   c_halbe_stunde number(28,10) := 1/48;
   l_tagesanteil number(28,10);

BEGIN
   l_anz_halbe_stunden := (p_date-trunc(p_date)) / c_halbe_stunde;
   -- dbms_output.put_line('anz_Halbe roh: ' || l_anz_halbe_stunden);
   -- !!! Sonst macht Oracle Rundungsfehler
   -- FALSCH : !!!!!l_anz_halbe_stunden := round(l_anz_halbe_stunden,7);
   l_anz_halbe_stunden := round(l_anz_halbe_stunden,4);
   -- dbms_output.put_line('anz_Halbe: ' || l_anz_halbe_stunden);
   -- dbms_output.put_line('ceil: ' || ceil(l_anz_halbe_stunden));

   l_tagesanteil := c_halbe_stunde * (ceil(l_anz_halbe_stunden));
   -- dbms_output.put_line('l_tagesanteil: ' || l_tagesanteil);
   l_result := trunc(p_date) + l_tagesanteil;
   RETURN l_result;
exception when others then
  return NULL;
END;

function get_raum_verraum_bez (p_raumid in RAUM_IN_VERANST_RAUM.RAUM_ID%type) return VERANST_RAUM.bezeichnung1%type is

 cursor c_raum_verraum_bez (c_raumid in RAUM_IN_VERANST_RAUM.RAUM_ID%type) is
    select rvr2.VERANST_RAUM_ID, vr2.BEZEICHNUNG1, vr2.FON, count(*) as Anz_raeume from
              RAUM_IN_VERANST_RAUM rvr2, VERANST_RAUM vr2, RAUM_TYP rt, RAUM_IN_VERANST_RAUM rvree  where
         vr2.id = rvr2.veranst_raum_id
         and vr2.deldat is null
         and rvr2.raum_id = c_raumid
         and vr2.RAUM_TYP_ID = rt.id
         and rt.bezeichnung <> 'Büro'
         and rvree.veranst_raum_id = vr2.id
         group by rvr2.VERANST_RAUM_ID, vr2.BEZEICHNUNG1, vr2.FON
         order by count(*) asc, vr2.BEZEICHNUNG1 asc;


 v_veranst_raum_id      VERANST_RAUM.id%type;
 v_veranst_raum_bez     VERANST_RAUM.BEZEICHNUNG1%type;
 v_veranst_raum_fon     VERANST_RAUM.FON%type;
 v_ret_bez              varchar2(300);
 v_veranst_raum_found   boolean;
 v_Anz_Raeume_akt       number(7,0);
 v_Anz_Raeume_vorher    number(7,0);
 v_Fertig               boolean;

begin
   v_veranst_raum_found := false;
   v_ret_bez := null;
   v_Anz_Raeume_akt := 0;
   v_Anz_Raeume_vorher := 0;
   v_Fertig := false;
   open c_raum_verraum_bez(p_raumid);
   fetch c_raum_verraum_bez into v_veranst_raum_id, v_veranst_raum_bez, v_veranst_raum_fon, v_Anz_Raeume_akt;
   v_Anz_Raeume_vorher := v_Anz_Raeume_akt;

   While c_raum_verraum_bez%found and NOT v_Fertig loop
      v_veranst_raum_found := true;
      v_veranst_raum_fon := replace(v_veranst_raum_fon,'.');
      v_veranst_raum_fon := replace(v_veranst_raum_fon,'-');
      v_veranst_raum_fon := replace(v_veranst_raum_fon,'_');

      if v_Anz_Raeume_vorher = v_Anz_Raeume_akt then
        if v_ret_bez is NOT null then
           v_ret_bez := v_ret_bez || ' // ';
        end if;
        if trim(v_veranst_raum_fon) is null then
           v_ret_bez := substr(v_ret_bez || trim(v_veranst_raum_bez),1,300);
        else
           v_ret_bez := substr(v_ret_bez || trim(v_veranst_raum_bez) || '  Tel: ' || v_veranst_raum_fon,1,300);
        end if;
        -- Gibt es ev. ZWEI Veranst-Räume NUR mit diesem Raum?
        fetch c_raum_verraum_bez into v_veranst_raum_id, v_veranst_raum_bez, v_veranst_raum_fon, v_Anz_Raeume_akt;
      else
         v_Fertig := true;
      end if;
   end loop;
   close c_raum_verraum_bez;
   if NOT v_veranst_raum_found then
      -- Raum ist keinem einzelnen oder einem gelöschten Veranst-Raum zugeordnet
      v_ret_bez := 'Error: Kein def. Veranst-Raum';
   end if;


   return v_ret_bez;

exception
   when others then
      v_ret_bez := substr('Error: ' || sqlerrm,1,30);
      return v_ret_bez;

end get_raum_verraum_bez;

function get_next_execution_time (p_ab in date) return date is

 result date;
 -- p_ab dient nur zum entwickeln.
 dstart date;
 ab date;
 i number := 0;
 Anfang number;    -- Minuten des Tages, bis zu denen keine Rechnung erfolgt
 Ende number;      -- Minuten des Tages, ab denen keine Rechnung erfolgt
begin

 if p_ab is null then
    ab := sysdate;
 else
    ab := p_ab;
 end if;

 dstart := trunc(ab) +  (trunc((ab - trunc(ab)) * 24 * 4 )  + 1)/(24 * 4);
 Anfang := to_date('1.1.1900 ' || const_aktualisieren_von, 'dd.mm.yyyy hh24:mi:ss') - trunc(to_date('1.1.1900','dd.mm.yyyy'));
 Ende := to_date('1.1.1900 ' || const_aktualisieren_bis, 'dd.mm.yyyy hh24:mi:ss') - trunc(to_date('1.1.1900','dd.mm.yyyy'));

 if ende <= Anfang then
  raise_application_error(-20500, 'Die Konstanten  CONST_AKTUALISIEREN_VON muss vor CONST_AKTUALISIEREN_BIS liegen!');
 end if;
 loop
   result := dstart + i/96;   -- 1/4 Stunden
   i := i+1;
   if (result - trunc(result)) >= Anfang and  (result - trunc(result)) <= Ende
      -- Die Wochentage sind AMERIKANISCH, also Sonntag ist die 1
      and (to_char(result,'D') IN (2,3,4,5,6)) then
     exit ;
   end if;
 end loop;
 return result;
end get_next_execution_time;

function Get_Marb_Name_from_ID (p_M_ID MITARBEITER.ID%TYPE) RETURN varchar2 as
retval varchar2(50);

BEGIN
  begin
    -- kein const_Delim
    Select m.nachname || ' ' || m.vorname  into retval from MITARBEITER m
      WHERE m.ID = p_M_ID;

  exception
    When others Then
    retval := NULL;
  end;
  Return retval;
END Get_Marb_Name_from_ID;

procedure  Create_CrestronFusion_ExpFiles as


  v_Zeile varchar2(4000);
  v_MailContent varchar2(3500);
  v_Filename varchar2(400);
  v_Datei_Nummer number;
  v_Meld_Wo varchar2(30);
  const_Anz_Tage_aufheben number(3,0):= 2;

begin
  v_Meld_Wo := 'AAA';
  -- RJE Alte Einträge löschen:
  delete from DATEI_AUSGABE
    where DATEI_TYP = const_CrestronFusion_Datei_TYP
    and TERMIN_GESCHRIEBEN is not null
    and TERMIN_FREIGABE < sysdate - const_Anz_Tage_aufheben;

  v_Meld_Wo := 'AAB';
  for rec in (
    SELECT DISTINCT cr.STANDORT_ID, cr.raum_id, cr.raum_nr_ges_geb, cr.Raum_nr_Punkt, cr.raum_verraum_Bez from CRESTRON_FUSION_RAUM cr -- ein Raum kann in verschiedenen Veranstaltungsräumen sein
  ) loop
      v_filename := get_ascii_Dir_name(rec.STANDORT_ID) || rec.raum_nr_ges_geb || '.' || const_CrestronFusion_Datei_TYP;
      tab_datei_ausgabe.begindatei ( rec.raum_nr_ges_geb, NULL, const_CrestronFusion_Datei_TYP, v_filename);
      v_Meld_Wo := 'AAC';
      v_Zeile := rec.Raum_nr_Punkt || const_Delim || rec.raum_verraum_Bez;
      TAB_DATEI_AUSGABE.WriteLine( v_Zeile);
      v_Meld_Wo := 'AAD';

     for rec_zeile in (
       SELECT cal.BEGINN_PUFFER_Datum_Char,
              cal.beginn_PUFFER_Zeit_norm,
              cal.ENDE_TERMIN_DATUM_CHAR,
              cal.ENDE_TERMIN_ZEIT_NORM,
              cal.THEMA_NORM,
              cal.MITARBEITER_ID,
              cal.BETREUER,
              cal.VR_RAUM_NAME from CRESTRON_FUSION_EXP_FILE cal where cal.RAUM_ID = rec.raum_id
              order by cal.BEGINN_TERMIN_DATE asc
     ) loop
         v_Zeile := --rec_zeile.BETREUER
            Get_Marb_Name_from_ID(rec_zeile.MITARBEITER_ID)  || ' - ' || rec_zeile.thema_norm || const_Delim ||
            rec_zeile.BEGINN_PUFFER_Datum_Char || const_Delim ||
            rec_zeile.beginn_PUFFER_Zeit_norm || const_Delim ||
            rec_zeile.ENDE_TERMIN_Datum_Char || const_Delim ||
            rec_zeile.ENDE_TERMIN_Zeit_norm;
         TAB_DATEI_AUSGABE.WriteLine( v_Zeile);
         v_Meld_Wo := 'BBB';
     end loop;
     v_Meld_Wo := 'CCC';
     tab_datei_ausgabe.Abschicken;
     v_Meld_Wo := 'DDD';
      -- dbms_output.put_line('AAA');
  end loop;
  v_Meld_Wo := 'EEE';
  commit;
  v_Meld_Wo := 'FFF';
exception
   when others then
    v_MailContent := substr(const_Error_Mail_Empfaenger || utl_tcp.CRLF || 'FEHLER in PCK_CrestronFusion_EXPORT.Create_CrestronFusion_ExpFiles' || utl_tcp.CRLF,1,3000);
    v_MailContent := substr(v_MailContent || sqlerrm || utl_tcp.CRLF,1,3000);
    v_MailContent := substr(v_MailContent || 'bei v_Meld_Wo: ' || v_Meld_Wo || utl_tcp.CRLF,1,3000);

    tab_datei_ausgabe.Verwerfen;
    rollback;
    v_Filename := substr(const_Error_Mail_File_Prae || to_char(sysdate,'dd_mm_yyyy_hh24_mi_ss'),1,400) ;
    insert into Datei_Ausgabe
       (DATEI_NAME,                        DATEI_INHALT,  DATEI_TYP, REFERENZ_ID, BEMERKUNG, TERMIN_FREIGABE)
     values
       (v_Filename, v_MailContent,                        'ERR',     NULL, 'PCK_CrestronFusion_EXPORT.Create_CrestronFusion_ExpFiles', sysdate);
     commit;
end Create_CrestronFusion_ExpFiles;

END PCK_CrestronFusion_EXPORT;
/

  CREATE OR REPLACE NONEDITIONABLE PACKAGE ORA_MIGRA.MY_NEW_PACK 
IS
PROCEDURE auto_as;
PROCEDURE auto_is;
END my_new_pack;
/

CREATE OR REPLACE NONEDITIONABLE PACKAGE BODY ORA_MIGRA.MY_NEW_PACK 
IS
PROCEDURE auto_as as
  vname varchar(20) :='manish';
 begin 
 dbms_output.enable();
 dbms_output.put_line('what is my name?'||vname);
end auto_as;

PROCEDURE auto_is is
  vname varchar(20) :='manish';
 begin 
 dbms_output.enable();
 dbms_output.put_line('what is my name?'||vname);
end auto_is;

END my_new_pack;
/

  CREATE OR REPLACE NONEDITIONABLE PACKAGE ORA_MIGRA.EMP_MGMT AS 
   FUNCTION hire (last_name VARCHAR2, job_id VARCHAR2, 
      manager_id NUMBER, salary NUMBER, 
      commission_pct NUMBER, department_id NUMBER) 
      RETURN NUMBER; 
   FUNCTION create_dept(department_id NUMBER, location_id NUMBER) 
      RETURN NUMBER; 
   PROCEDURE remove_emp(employee_id NUMBER); 
   PROCEDURE remove_dept(department_id NUMBER); 
   PROCEDURE increase_sal(employee_id NUMBER, salary_incr NUMBER); 
   PROCEDURE increase_comm(employee_id NUMBER, comm_incr NUMBER); 
   no_comm EXCEPTION; 
   no_sal EXCEPTION; 
END emp_mgmt;
/

CREATE OR REPLACE NONEDITIONABLE PACKAGE BODY ORA_MIGRA.EMP_MGMT AS 
   tot_emps NUMBER; 
   tot_depts NUMBER; 
FUNCTION hire 
   (last_name VARCHAR2, job_id VARCHAR2, 
    manager_id NUMBER, salary NUMBER, 
    commission_pct NUMBER, department_id NUMBER) 
   RETURN NUMBER IS new_empno NUMBER; 
BEGIN 
   SELECT employees_seq.NEXTVAL 
      INTO new_empno 
      FROM DUAL; 
   INSERT INTO employees 
      VALUES (new_empno, 'First', 'Last','first.last@oracle.com', 
              '(123)123-1234','18-JUN-02','IT_PROG',90000000,00, 
              100,110); 
      tot_emps := tot_emps + 1; 
   RETURN(new_empno); 
END; 
FUNCTION create_dept(department_id NUMBER, location_id NUMBER) 
   RETURN NUMBER IS 
      new_deptno NUMBER; 
   BEGIN 
      SELECT departments_seq.NEXTVAL 
         INTO new_deptno 
         FROM dual; 
      INSERT INTO departments 
         VALUES (new_deptno, 'department name', 100, 1700); 
      tot_depts := tot_depts + 1; 
      RETURN(new_deptno); 
   END; 
PROCEDURE remove_emp (employee_id NUMBER) IS 
   BEGIN 
      DELETE FROM employees 
      WHERE employees.employee_id = remove_emp.employee_id; 
      tot_emps := tot_emps - 1; 
   END; 
PROCEDURE remove_dept(department_id NUMBER) IS 
   BEGIN 
      DELETE FROM departments 
      WHERE departments.department_id = remove_dept.department_id; 
      tot_depts := tot_depts - 1; 
      SELECT COUNT(*) INTO tot_emps FROM employees; 
   END; 
PROCEDURE increase_sal(employee_id NUMBER, salary_incr NUMBER) IS 
   curr_sal NUMBER; 
   BEGIN 
      SELECT salary INTO curr_sal FROM employees 
      WHERE employees.employee_id = increase_sal.employee_id; 
      IF curr_sal IS NULL 
         THEN RAISE no_sal; 
      ELSE 
         UPDATE employees 
         SET salary = salary + salary_incr 
         WHERE employee_id = employee_id; 
      END IF; 
   END; 
PROCEDURE increase_comm(employee_id NUMBER, comm_incr NUMBER) IS 
   curr_comm NUMBER; 
   BEGIN 
      SELECT commission_pct 
      INTO curr_comm 
      FROM employees 
      WHERE employees.employee_id = increase_comm.employee_id; 
      IF curr_comm IS NULL 
         THEN RAISE no_comm; 
      ELSE 
         UPDATE employees 
         SET commission_pct = commission_pct + comm_incr; 
      END IF; 
   END; 
END emp_mgmt;
/

CREATE OR REPLACE NONEDITIONABLE PACKAGE ORA_MIGRA.PCK_STUNDEN_AUSW AS
procedure FILL_STUNDEN;
procedure STUNDEN_AUSWERTUNG;
END PCK_STUNDEN_AUSW;
/

CREATE OR REPLACE NONEDITIONABLE PACKAGE BODY ORA_MIGRA.PCK_STUNDEN_AUSW AS
-- RJE 03.11.2015 angelegt
-- NUR für individuelle Stundenauswertung Herr Rottkemper
-- ******************************************************************
procedure FILL_STUNDEN as
-- RJe 03.11.2015 Soll die Tabelle STUNDEN füllen.
--    Die Tabelle Stunden liefert die Stunden-Intervalle für die Stunden-Auswertung

 

-- Wieviele Tage in die Zukunft sollen die Stunden angelegt werden:
const_Anz_Tage_In_Zukunft number(5,0) := 400;
const_Stunden_Ab date := to_date('01.01.2066','dd.mm.yyyy');



v_Max_Stunden_Bisher STUNDEN.Beginn%Type;
v_Akt_Datum date;
v_Anz_Tage_anzulegen number(6,0);
v_Anzulegender_Tag date;



v_i number(6,0);



begin
   -- select max(Beginn)  from STUNDEN;
   select max(Beginn) into v_Max_Stunden_Bisher from STUNDEN;
   -- Initialisierung:
   if v_Max_Stunden_Bisher is null then
      v_Max_Stunden_Bisher := const_Stunden_Ab;
   end if;



   v_Akt_Datum := trunc(sysdate);
   v_Max_Stunden_Bisher := trunc(v_Max_Stunden_Bisher);
   v_Anz_Tage_anzulegen := v_Akt_Datum - v_Max_Stunden_Bisher + const_Anz_Tage_In_Zukunft;
   -- dbms_output.put_line('v_Anz_Tage_anzulegen: ' || v_Anz_Tage_anzulegen);



   v_i := 1;



   while v_i < v_Anz_Tage_anzulegen loop
     v_Anzulegender_Tag := v_Max_Stunden_Bisher + v_i;



     insert into STUNDEN (Beginn, Ende)
      select to_date(to_char(v_Anzulegender_Tag,'dd.mm.yyyy ') || sm.Beginn_chr,'dd.mm.yyyy hh24:mi:ss'),
         to_date(to_char(v_Anzulegender_Tag,'dd.mm.yyyy ') || sm.Ende_chr,'dd.mm.yyyy hh24:mi:ss') from
            STUNDEN_META sm;
     commit;
     v_i := v_i +1;
   end loop;



end FILL_STUNDEN;
-- ******************************************************************
procedure STUNDEN_AUSWERTUNG as
/*
-- ==== Auswertung:



select s.beginn, s.ende, b.VERANST_RAUM_ID, b.BEGINN_PUFFER, b.ENDE_TERMIN from bestellung b, stunden s where
  -- nur Raum-Bestellungen
  b.DIENST_TYP = 'R'
  and b.BESTAET_STATUS = 'J'
        and (
           ((BEGINN_PUFFER > s.beginn) AND (BEGINN_PUFFER < s.ende)) or
           ((ENDE_TERMIN > s.beginn) AND (ENDE_TERMIN < s.ende)) or
           ((BEGINN_PUFFER <= s.beginn) AND (ENDE_TERMIN >= s.ende)) or
           ((BEGINN_PUFFER > s.beginn) AND (ENDE_TERMIN < s.ende)) or
           ((BEGINN_PUFFER = s.beginn) AND (ENDE_TERMIN = s.ende))
           )
  and b.VERANST_RAUM_ID = 6569;
*/




begin
   null;
end STUNDEN_AUSWERTUNG;
END;
/

  CREATE OR REPLACE NONEDITIONABLE PACKAGE ORA_MIGRA.TRANS_DATA AUTHID DEFINER AS
  TYPE TimeRec IS RECORD (
    minutes SMALLINT,
    hours   SMALLINT);
  TYPE TransRec IS RECORD (
    category VARCHAR2(10),
    account  INT,
    amount   REAL,
    time_of  TimeRec);
  minimum_balance     CONSTANT REAL := 10.00;
  number_processed    INT;
  insufficient_funds  EXCEPTION;
  PRAGMA EXCEPTION_INIT(insufficient_funds, -4097);
END trans_data;
/

DROP MATERIALIZED VIEW ORA_MIGRA.EMP_AGGR_MV;
DROP MATERIALIZED VIEW ORA_MIGRA.MV_EMP_DETAILS;
DROP MATERIALIZED VIEW if exists ORA_MIGRA.EMP_AGGR_MV_DUPL cascade;

  CREATE MATERIALIZED VIEW ORA_MIGRA.EMP_AGGR_MV (DEPARTMENT_ID, SAL_BY_DEPT)
  SEGMENT CREATION IMMEDIATE
  ORGANIZATION HEAP PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE USERS 
  BUILD IMMEDIATE
  USING INDEX 
  REFRESH FORCE ON DEMAND
  USING DEFAULT LOCAL ROLLBACK SEGMENT
  USING ENFORCED CONSTRAINTS DISABLE ON QUERY COMPUTATION ENABLE QUERY REWRITE
  AS SELECT department_id, SUM(salary) AS sal_by_dept
FROM   employees
GROUP BY department_id ;

 COMMENT ON MATERIALIZED VIEW ORA_MIGRA.EMP_AGGR_MV  IS 'snapshot table for snapshot ORA_MIGRA.EMP_AGGR_MV';


  CREATE MATERIALIZED VIEW ORA_MIGRA.EMP_AGGR_MV_DUPL (DEPARTMENT_ID, SAL_BY_DEPT)
  SEGMENT CREATION IMMEDIATE
  ORGANIZATION HEAP PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE USERS 
  BUILD IMMEDIATE
  USING INDEX 
  REFRESH FORCE ON DEMAND
  USING DEFAULT LOCAL ROLLBACK SEGMENT
  USING ENFORCED CONSTRAINTS DISABLE ON QUERY COMPUTATION DISABLE QUERY REWRITE
  AS SELECT department_id, SUM(salary) AS sal_by_dept FROM employees GROUP BY department_id ;

/*

DROP INDEX ORA_MIGRA.I_SNAP$_EMP_AGGR_MV;
DROP INDEX ORA_MIGRA.I_SNAP$_EMP_AGGR_MV_DUPL;

  CREATE UNIQUE INDEX ORA_MIGRA.I_SNAP$_EMP_AGGR_MV ON ORA_MIGRA.EMP_AGGR_MV (SYS_OP_MAP_NONNULL(DEPARTMENT_ID)) 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE USERS ;


  CREATE UNIQUE INDEX ORA_MIGRA.I_SNAP$_EMP_AGGR_MV_DUPL ON ORA_MIGRA.EMP_AGGR_MV_DUPL (SYS_OP_MAP_NONNULL(DEPARTMENT_ID)) 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE USERS ;
*/

   COMMENT ON MATERIALIZED VIEW ORA_MIGRA.EMP_AGGR_MV_DUPL  IS 'snapshot table for snapshot ORA_MIGRA.EMP_AGGR_MV_DUPL';


  CREATE MATERIALIZED VIEW ORA_MIGRA.MV_EMP_DETAILS (EMPLOYEE_ID, EMPLOYEE_NAME, MANAGER_NAME, SALARY, COMMISSION_PCT, DEPARTMENT_NAME, JOB_TITLE, CITY, STATE_PROVINCE, COUNTRY_NAME, REGION_NAME)
  SEGMENT CREATION IMMEDIATE
  ORGANIZATION HEAP PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE USERS 
  BUILD IMMEDIATE
  USING INDEX 
  REFRESH FORCE ON DEMAND
  USING DEFAULT LOCAL ROLLBACK SEGMENT
  USING ENFORCED CONSTRAINTS DISABLE ON QUERY COMPUTATION DISABLE QUERY REWRITE
  AS SELECT
  e.employee_id,
  e.first_name||' '||  e.last_name Employee_name,
  m.first_name||' '|| m.last_name Manager_name,
  e.salary Salary,
  e.commission_pct,
  d.department_name,
  j.job_title,
  l.city,
  l.state_province,
  c.country_name,
  r.region_name
FROM
  employees e,
  employees m,
  departments d,
  jobs j,
  locations l,
  countries c,
  regions r
WHERE e.department_id = d.department_id
  AND e.manager_id = m.employee_id
  AND d.location_id = l.location_id
  AND l.country_id = c.country_id
  AND c.region_id = r.region_id
  AND j.job_id = e.job_id
  ;

   COMMENT ON MATERIALIZED VIEW ORA_MIGRA.MV_EMP_DETAILS  IS 'snapshot table for snapshot ORA_MIGRA.MV_EMP_DETAILS';

